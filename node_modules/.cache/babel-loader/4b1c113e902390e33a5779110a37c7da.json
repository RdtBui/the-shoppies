{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieDetails = ({\n  movieId\n}) => {\n  _s();\n\n  const [actors, setActors] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [director, setDirector] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [writer, setWriter] = useState('');\n  const [ratings, setRatings] = useState([]);\n  const [plot, setPlot] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data;\n      let genreArray = results.Genre.split(',');\n      setActors(results.Actors);\n      setBoxOffice(results.BoxOffice);\n      setDirector(results.Director);\n      setGenres(genreArray);\n      setWriter(results.Writer);\n      setRatings(results.Ratings);\n      setPlot(results.Plot);\n      console.log(\"Detail response:\");\n      console.log(results);\n    };\n\n    fetchData();\n  }, [movieId]);\n  const displayRatings = ratings ? ratings.map(rating => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  const displayGenres = genres ? genres.map(genre => {\n    return /*#__PURE__*/_jsxDEV(Button, {\n      children: genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Chip, {\n      label: `${genre}`,\n      color: \"primary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n      size: \"small\",\n      children: displayGenres\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Plot: \", plot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), displayRatings, /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Actors: \", actors]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Box Office: \", boxOffice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Director: \", director]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Writer: \", writer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"KapF6XidqP7xwMI6mUCLcYA6i8I=\");\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Typography","omdb","Grid","Box","Chip","Button","ButtonGroup","MovieDetails","movieId","actors","setActors","boxOffice","setBoxOffice","director","setDirector","genres","setGenres","writer","setWriter","ratings","setRatings","plot","setPlot","fetchData","response","get","params","i","results","data","genreArray","Genre","split","Actors","BoxOffice","Director","Writer","Ratings","Plot","console","log","displayRatings","map","rating","Source","Value","displayGenres","genre"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nconst MovieDetails = ({ movieId }) => {\n\n    const [actors, setActors] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [writer, setWriter] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [plot, setPlot] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n            let genreArray = results.Genre.split(',');\n\n\n            setActors(results.Actors);\n            setBoxOffice(results.BoxOffice);\n            setDirector(results.Director);\n            setGenres(genreArray);\n            setWriter(results.Writer);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n\n\n            console.log(\"Detail response:\");\n            console.log(results);\n        }\n        fetchData();\n    }, [movieId]);\n\n    const displayRatings = (ratings ? ratings.map((rating) => {\n        return (\n            <div>\n                <Typography>\n                    {rating.Source}\n                </Typography>\n                <Typography>\n                    {rating.Value}\n                </Typography>\n            </div>\n        );\n    }) : null);\n\n    const displayGenres = (genres ? genres.map((genre) => {\n        return (\n            <Button>{genre}</Button>\n        );\n    }) : null)\n\n    return (\n        <div>\n            <Chip\n                label={`${genre}`}\n                color=\"primary\" />\n            <ButtonGroup size=\"small\">\n                {displayGenres}\n            </ButtonGroup>\n            <Typography>Plot: {plot}</Typography>\n            {displayRatings}\n            <Typography>Actors: {actors}</Typography>\n            <Typography>Box Office: {boxOffice}</Typography>\n            <Typography>Director: {director}</Typography>\n            <Typography>Writer: {writer}</Typography>\n        </div>\n    );\n};\n\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}