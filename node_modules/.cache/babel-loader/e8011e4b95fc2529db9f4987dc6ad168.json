{"ast":null,"code":"/*\nCopyright (c) 2015-present NAVER Corp.\nname: @egjs/react-flicking\nlicense: MIT\nauthor: NAVER Corp.\nrepository: https://github.com/naver/egjs-flicking/tree/master/packages/react-flicking\nversion: 3.7.1\n*/\nimport NativeFlicking, { DEFAULT_OPTIONS, withFlickingMethods } from '@egjs/flicking';\nimport { Component, createElement, version, Children } from 'react';\nimport ListDiffer from '@egjs/list-differ';\nimport ChildrenDiffer from '@egjs/children-differ';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n}\n\nvar CloneComponent = /*#__PURE__*/function (_super) {\n  __extends(CloneComponent, _super);\n\n  function CloneComponent() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  var __proto = CloneComponent.prototype;\n\n  __proto.render = function () {\n    return this.props.children;\n  };\n\n  return CloneComponent;\n}(Component);\n\nvar FLICKING_PROPS = {\n  tag: \"div\",\n  viewportTag: \"div\",\n  cameraTag: \"div\",\n  classPrefix: \"eg-flick\",\n  plugins: [],\n  onNeedPanel: function (e) {},\n  onMoveStart: function (e) {},\n  onMove: function (e) {},\n  onMoveEnd: function (e) {},\n  onHoldStart: function (e) {},\n  onHoldEnd: function (e) {},\n  onRestore: function (e) {},\n  onSelect: function (e) {},\n  onChange: function (e) {},\n  onVisibleChange: function (e) {}\n};\n\nvar Flicking = /*#__PURE__*/function (_super) {\n  __extends(Flicking, _super); // life cycle\n\n\n  function Flicking(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      cloneCount: 0\n    };\n    _this.options = __assign(__assign({}, DEFAULT_OPTIONS), {\n      renderExternal: true\n    }); // differ\n\n    _this.pluginsDiffer = new ListDiffer();\n    var options = _this.options;\n\n    for (var name in props) {\n      if (name in DEFAULT_OPTIONS) {\n        options[name] = props[name];\n      }\n    }\n\n    return _this;\n  }\n\n  var __proto = Flicking.prototype;\n\n  __proto.render = function () {\n    var _this = this;\n\n    var props = this.props;\n    /* tslint:disable:naming-convention */\n\n    var Tag = props.tag;\n    var Viewport = props.viewportTag;\n    var Camera = props.cameraTag;\n    /* tslint:enable:naming-convention */\n\n    var classPrefix = props.classPrefix;\n    var attributes = {};\n\n    for (var name in props) {\n      if (!(name in FLICKING_PROPS) && !(name in DEFAULT_OPTIONS)) {\n        attributes[name] = props[name];\n      }\n    }\n\n    return createElement(Tag, __assign({}, attributes, {\n      ref: function (e) {\n        e && (_this.containerElement = e);\n      }\n    }), createElement(Viewport, {\n      className: classPrefix + \"-viewport\"\n    }, createElement(Camera, {\n      className: classPrefix + \"-camera\",\n      ref: function (e) {\n        e && (_this.cameraElement = e);\n      }\n    }, this.renderPanels())));\n  };\n\n  __proto.componentDidUpdate = function () {\n    var result = this.childrenDiffer.update(this.getElements());\n    this.flicking.sync(result);\n    this.checkPlugins();\n    this.checkCloneCount();\n  };\n\n  __proto.componentDidMount = function () {\n    var _this = this;\n\n    this.childrenDiffer = new ChildrenDiffer(this.getElements());\n    this.flicking = new NativeFlicking(this.containerElement, __assign(__assign({}, this.options), {\n      framework: \"react\",\n      frameworkVersion: version\n    })).on({\n      moveStart: function (e) {\n        return _this.props.onMoveStart(e);\n      },\n      move: function (e) {\n        return _this.props.onMove(e);\n      },\n      moveEnd: function (e) {\n        return _this.props.onMoveEnd(e);\n      },\n      holdStart: function (e) {\n        return _this.props.onHoldStart(e);\n      },\n      holdEnd: function (e) {\n        return _this.props.onHoldEnd(e);\n      },\n      select: function (e) {\n        return _this.props.onSelect(e);\n      },\n      needPanel: function (e) {\n        return _this.props.onNeedPanel(e);\n      },\n      change: function (e) {\n        return _this.props.onChange(e);\n      },\n      restore: function (e) {\n        return _this.props.onRestore(e);\n      },\n      visibleChange: function (e) {\n        _this.props.onVisibleChange(e);\n\n        _this.forceUpdate();\n      }\n    });\n    var children = this.getChildren();\n    this.jsxDiffer = new ListDiffer(children.map(function (child) {\n      return \"\" + child.key;\n    }));\n\n    if (this.props.status) {\n      this.setStatus(this.props.status);\n    }\n\n    this.checkPlugins();\n    this.checkCloneCount();\n\n    if (this.props.renderOnlyVisible) {\n      this.forceUpdate();\n    }\n  };\n\n  __proto.componentWillUnmount = function () {\n    this.destroy({\n      preserveUI: true\n    });\n  }; // private\n\n\n  __proto.checkPlugins = function () {\n    var _a = this.pluginsDiffer.update(this.props.plugins),\n        list = _a.list,\n        added = _a.added,\n        removed = _a.removed,\n        prevList = _a.prevList;\n\n    this.flicking.addPlugins(added.map(function (index) {\n      return list[index];\n    }));\n    this.flicking.removePlugins(removed.map(function (index) {\n      return prevList[index];\n    }));\n  };\n\n  __proto.checkCloneCount = function () {\n    var cloneCount = this.flicking.getCloneCount();\n\n    if (this.state.cloneCount !== cloneCount) {\n      this.setState({\n        cloneCount: cloneCount\n      });\n    }\n  };\n\n  __proto.renderPanels = function () {\n    var renderOnlyVisible = this.props.renderOnlyVisible;\n    var flicking = this.flicking;\n    var reactChildren = this.getChildren();\n    var panels;\n\n    if (flicking && renderOnlyVisible) {\n      var diffResult = this.jsxDiffer.update(reactChildren.map(function (child) {\n        return \"\" + child.key;\n      }));\n      var panelCnt_1 = reactChildren.length;\n      flicking.beforeSync(diffResult);\n      var indexesToRender = flicking.getRenderingIndexes(diffResult);\n      panels = indexesToRender.map(function (index) {\n        if (index >= panelCnt_1) {\n          var relativeIndex = index % panelCnt_1;\n          var cloneIndex = Math.floor(index / panelCnt_1) - 1;\n          var origEl = reactChildren[relativeIndex];\n          return createElement(CloneComponent, {\n            key: \"clone\" + cloneIndex + origEl.key\n          }, origEl);\n        } else {\n          return reactChildren[index];\n        }\n      });\n    } else {\n      var cloneCount = this.state.cloneCount;\n      panels = __spreadArrays(reactChildren);\n\n      var _loop_1 = function (i) {\n        panels = panels.concat(reactChildren.map(function (el) {\n          return createElement(CloneComponent, {\n            key: \"clone\" + i + el.key\n          }, el);\n        }));\n      };\n\n      for (var i = 0; i < cloneCount; ++i) {\n        _loop_1(i);\n      }\n    }\n\n    return panels;\n  };\n\n  __proto.getChildren = function () {\n    var children = Children.toArray(this.props.children).slice();\n    return typeof this.props.lastIndex === \"number\" ? children.slice(0, this.props.lastIndex + 1) : children;\n  };\n\n  __proto.getElements = function () {\n    return this.cameraElement.children;\n  };\n\n  Flicking.defaultProps = FLICKING_PROPS;\n\n  __decorate([withFlickingMethods], Flicking.prototype, \"flicking\", void 0);\n\n  return Flicking;\n}(Component);\n\nexport default Flicking;","map":{"version":3,"sources":["../src/react-flicking/Clone.tsx","../src/react-flicking/consts.ts","../src/react-flicking/Flicking.tsx"],"names":["__extends","FLICKING_PROPS","tag","viewportTag","cameraTag","classPrefix","plugins","onNeedPanel","onMoveStart","onMove","onMoveEnd","onHoldStart","onHoldEnd","onRestore","onSelect","onChange","onVisibleChange","Flicking","_this","cloneCount","withFlickingMethods","__decorate","DEFAULT_OPTIONS","renderExternal","_super","options","name","props","Tag","Viewport","Camera","attributes","ref","e","className","result","__assign","framework","frameworkVersion","React","moveStart","move","moveEnd","holdStart","holdEnd","select","needPanel","change","restore","visibleChange","children","child","preserveUI","list","added","removed","prevList","flicking","reactChildren","diffResult","panelCnt_1","indexesToRender","panels","index","relativeIndex","cloneIndex","Math","origEl","key","i","el"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\n\nexport class CloneComponent extends Component {\n  public render() {\n    return this.props.children;\n  }\n}\n","import { ChangeEvent, FlickingEvent, SelectEvent, NeedPanelEvent, VisibleChangeEvent } from \"@egjs/flicking\";\nimport { FlickingProps } from \"./types\";\n\nexport const FLICKING_PROPS: FlickingProps = {\n  tag: \"div\",\n  viewportTag: \"div\",\n  cameraTag: \"div\",\n  classPrefix: \"eg-flick\",\n  plugins: [],\n  onNeedPanel: (e: NeedPanelEvent) => {},\n  onMoveStart: (e: FlickingEvent) => {},\n  onMove: (e: FlickingEvent) => {},\n  onMoveEnd: (e: FlickingEvent) => {},\n  onHoldStart: (e: FlickingEvent) => {},\n  onHoldEnd: (e: FlickingEvent) => {},\n  onRestore: (e: FlickingEvent) => {},\n  onSelect: (e: SelectEvent) => {},\n  onChange: (e: ChangeEvent) => {},\n  onVisibleChange: (e: VisibleChangeEvent) => {},\n};\n","import NativeFlicking, { FlickingOptions, Plugin, FlickingEvent, NeedPanelEvent, withFlickingMethods, DEFAULT_OPTIONS, VisibleChangeEvent, SelectEvent, ChangeEvent } from \"@egjs/flicking\";\nimport * as React from \"react\";\nimport { CloneComponent } from \"./Clone\";\nimport { FLICKING_PROPS } from \"./consts\";\nimport { FlickingProps, FlickingType } from \"./types\";\nimport ListDiffer, { ListFormat } from \"@egjs/list-differ\";\nimport ChildrenDiffer from \"@egjs/children-differ\";\n\nclass Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n  public static defaultProps: FlickingProps = FLICKING_PROPS;\n  public state: {\n    cloneCount: number,\n  } = {\n      cloneCount: 0,\n    };\n  // Flicking\n  @withFlickingMethods\n  private flicking?: NativeFlicking | null;\n  private options: FlickingOptions = {\n    ...DEFAULT_OPTIONS,\n    renderExternal: true,\n  };\n  // differ\n  private pluginsDiffer: ListDiffer<Plugin> = new ListDiffer<Plugin>();\n  private childrenDiffer: ChildrenDiffer<HTMLElement>;\n  private jsxDiffer: ListDiffer<string>;\n  private containerElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  // life cycle\n  constructor(props: Partial<FlickingProps & FlickingOptions>) {\n    super(props);\n    const options = this.options;\n    for (const name in props) {\n      if (name in DEFAULT_OPTIONS) {\n        options[name] = props[name];\n      }\n    }\n  }\n\n  public render() {\n    const props = this.props;\n    /* tslint:disable:naming-convention */\n    const Tag = props.tag as any;\n    const Viewport = props.viewportTag as any;\n    const Camera = props.cameraTag as any;\n    /* tslint:enable:naming-convention */\n    const classPrefix = props.classPrefix;\n    const attributes: { [key: string]: any } = {};\n\n    for (const name in props) {\n      if (!(name in FLICKING_PROPS) && !(name in DEFAULT_OPTIONS)) {\n        attributes[name] = props[name];\n      }\n    }\n    return (\n      <Tag {...attributes} ref={e => {\n        e && (this.containerElement = e);\n      }}>\n        <Viewport className={`${classPrefix}-viewport`}>\n          <Camera className={`${classPrefix}-camera`} ref={e => {\n            e && (this.cameraElement = e);\n          }}>\n            {this.renderPanels()}\n          </Camera>\n        </Viewport>\n      </Tag>\n    );\n  }\n\n  public componentDidUpdate() {\n    const result = this.childrenDiffer!.update(this.getElements());\n    this.flicking!.sync(result);\n    this.checkPlugins();\n    this.checkCloneCount();\n  }\n\n  public componentDidMount() {\n    this.childrenDiffer = new ChildrenDiffer<HTMLElement>(this.getElements());\n    this.flicking = new NativeFlicking(\n      this.containerElement,\n      {\n        ...this.options,\n        framework: \"react\",\n        frameworkVersion: React.version,\n      } as object,\n    ).on({\n      moveStart: (e: FlickingEvent) => this.props.onMoveStart!(e),\n      move: (e: FlickingEvent) => this.props.onMove!(e),\n      moveEnd: (e: FlickingEvent) => this.props.onMoveEnd!(e),\n      holdStart: (e: FlickingEvent) => this.props.onHoldStart!(e),\n      holdEnd: (e: FlickingEvent) => this.props.onHoldEnd!(e),\n      select: (e: SelectEvent) => this.props.onSelect!(e),\n      needPanel: (e: NeedPanelEvent) => this.props.onNeedPanel!(e),\n      change: (e: ChangeEvent) => this.props.onChange!(e),\n      restore: (e: FlickingEvent) => this.props.onRestore!(e),\n      visibleChange: (e: VisibleChangeEvent) => {\n        this.props.onVisibleChange!(e);\n        this.forceUpdate();\n      },\n    });\n    const children = this.getChildren();\n    this.jsxDiffer = new ListDiffer<string>(children.map(child => `${child.key}`));\n\n    if (this.props.status) {\n      this.setStatus(this.props.status);\n    }\n    this.checkPlugins();\n    this.checkCloneCount();\n\n    if (this.props.renderOnlyVisible) {\n      this.forceUpdate();\n    }\n  }\n\n  public componentWillUnmount() {\n    this.destroy({ preserveUI: true });\n  }\n\n  // private\n  private checkPlugins() {\n    const { list, added, removed, prevList } = this.pluginsDiffer.update(this.props.plugins!);\n\n    this.flicking!.addPlugins(added.map(index => list[index]));\n    this.flicking!.removePlugins(removed.map(index => prevList[index]));\n  }\n\n  private checkCloneCount() {\n    const cloneCount = this.flicking!.getCloneCount();\n\n    if (this.state.cloneCount !== cloneCount) {\n      this.setState({\n        cloneCount,\n      });\n    }\n  }\n\n  private renderPanels() {\n    const { renderOnlyVisible } = this.props;\n    const flicking = this.flicking;\n    const reactChildren = this.getChildren();\n    let panels: Array<React.ReactElement<any>>;\n\n    if (flicking && renderOnlyVisible) {\n      const diffResult = this.jsxDiffer.update(reactChildren.map(child => `${child.key}`));\n      const panelCnt = reactChildren.length;\n\n      flicking.beforeSync(diffResult);\n\n      const indexesToRender = flicking.getRenderingIndexes(diffResult);\n      panels = indexesToRender.map(index => {\n        if (index >= panelCnt) {\n          const relativeIndex = index % panelCnt;\n          const cloneIndex = Math.floor(index / panelCnt) - 1;\n          const origEl = reactChildren[relativeIndex];\n\n          return <CloneComponent key={`clone${cloneIndex}${origEl.key}`}>{origEl}</CloneComponent>;\n        } else {\n          return reactChildren[index];\n        }\n      });\n    } else {\n      const cloneCount = this.state.cloneCount;\n      panels = [...reactChildren];\n\n      for (let i = 0; i < cloneCount; ++i) {\n        panels = panels.concat(reactChildren.map(el => {\n          return <CloneComponent key={`clone${i}${el.key}`}>{el}</CloneComponent>;\n        }));\n      }\n    }\n\n    return panels;\n  }\n\n  private getChildren() {\n    const children = React.Children.toArray(this.props.children).slice() as Array<React.ReactElement<any>>;\n    return typeof this.props.lastIndex === \"number\"\n      ? children.slice(0, this.props.lastIndex + 1)\n      : children;\n  }\n\n  private getElements(): ListFormat<HTMLElement> {\n    return this.cameraElement.children as any;\n  }\n}\ninterface Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>>, FlickingType<Flicking> { }\nexport default Flicking;\n"]},"metadata":{},"sourceType":"module"}