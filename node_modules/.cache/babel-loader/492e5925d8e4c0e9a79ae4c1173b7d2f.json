{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  bold: {\n    fontWeight: 600\n  },\n  detailMargin: {\n    margin: \"10px 15px\"\n  },\n  trailer: {\n    width: \"100%\" // height: \"100%\",\n\n  }\n});\n\nconst MovieDetails = ({\n  movieId,\n  expanded\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [actors, setActors] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [director, setDirector] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [writer, setWriter] = useState('');\n  const [ratings, setRatings] = useState([]);\n  const [plot, setPlot] = useState('');\n  const [title, setTitle] = useState('');\n  const [rated, setRated] = useState('');\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data; // let genreArray = [];\n      // if (results.Genre) {\n      //     genreArray = results.Genre.split(',');\n      // }\n\n      setGenres(results.Genre);\n      setActors(results.Actors);\n      setBoxOffice(results.BoxOffice);\n      setDirector(results.Director); // setGenres(genreArray);\n\n      setWriter(results.Writer);\n      setRatings(results.Ratings);\n      setPlot(results.Plot);\n      setTitle(results.Title);\n      setRated(results.Rated);\n      console.log(\"Detail response:\");\n      console.log(results);\n    };\n\n    fetchData();\n  }, [movieId]); // // YouTube API request for trailers, consumes quota\n  // useEffect(async () => {\n  //     const searchTerm = title + \" trailer\";\n  //     console.log(searchTerm);\n  //     const response = await youtube.get(\n  //         '/search',\n  //         {\n  //             params: {\n  //                 q: searchTerm\n  //             }\n  //         }\n  //     );\n  //     const results = response.data;\n  //     setTrailerUrl(`https://youtube.com/embed/${results.items[0].id.videoId}`);\n  // }, [title]);\n\n  const displayRatings = ratings ? ratings.map(rating => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: rating.Source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this);\n  }) : null; // const displayGenres = (genres ? genres.map((genre) => {\n  //     return (\n  //         <Chip label={genre} />\n  //     );\n  // }) : null);\n\n  const displayTrailer = trailerUrl ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n    className: classes.trailer,\n    src: trailerUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this) : null;\n\n  const customCard = (contentText, content) => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      square: true,\n      variant: \"outlined\",\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: contentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    display: \"flex\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 5,\n      style: {\n        margin: \"0px 0px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: customCard(\"Box Office\", boxOffice)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 8,\n        children: customCard(\"Genres\", genres)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.detailMargin,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 5,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          square: true,\n          variant: \"outlined\",\n          style: {\n            padding: \"15px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: displayRatings\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 7,\n        children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n          style: {\n            backgroundColor: \"pink\",\n            height: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.detailMargin,\n      children: customCard(\"Plot\", plot)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.detailMargin,\n      children: [customCard(\"Director\", director), customCard(\"Writer\", writer), customCard(\"Actors\", actors)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"086tWnpcWGtq/hYa3x/rBCcGSVE=\", false, function () {\n  return [useStyles];\n});\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Typography","omdb","youtube","Grid","Box","Button","ButtonGroup","Paper","Chip","Card","makeStyles","useStyles","bold","fontWeight","detailMargin","margin","trailer","width","MovieDetails","movieId","expanded","classes","actors","setActors","boxOffice","setBoxOffice","director","setDirector","genres","setGenres","writer","setWriter","ratings","setRatings","plot","setPlot","title","setTitle","rated","setRated","trailerUrl","setTrailerUrl","fetchData","response","get","params","i","results","data","Genre","Actors","BoxOffice","Director","Writer","Ratings","Plot","Title","Rated","console","log","displayRatings","map","rating","Source","Value","displayTrailer","customCard","contentText","content","padding","backgroundColor","height"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    bold: {\n        fontWeight: 600\n    },\n    detailMargin: {\n        margin: \"10px 15px\",\n    },\n    trailer: {\n        width: \"100%\",\n        // height: \"100%\",\n    },\n});\n\nconst MovieDetails = ({ movieId, expanded }) => {\n    const classes = useStyles();\n\n    const [actors, setActors] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [writer, setWriter] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [plot, setPlot] = useState('');\n    const [title, setTitle] = useState('');\n    const [rated, setRated] = useState('');\n    const [trailerUrl, setTrailerUrl] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n            // let genreArray = [];\n            // if (results.Genre) {\n            //     genreArray = results.Genre.split(',');\n            // }\n            setGenres(results.Genre);\n            setActors(results.Actors);\n            setBoxOffice(results.BoxOffice);\n            setDirector(results.Director);\n            // setGenres(genreArray);\n            setWriter(results.Writer);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n            setTitle(results.Title);\n            setRated(results.Rated);\n\n            console.log(\"Detail response:\");\n            console.log(results);\n        }\n        fetchData();\n    }, [movieId]);\n\n    // // YouTube API request for trailers, consumes quota\n    // useEffect(async () => {\n    //     const searchTerm = title + \" trailer\";\n    //     console.log(searchTerm);\n    //     const response = await youtube.get(\n    //         '/search',\n    //         {\n    //             params: {\n    //                 q: searchTerm\n    //             }\n    //         }\n    //     );\n    //     const results = response.data;\n    //     setTrailerUrl(`https://youtube.com/embed/${results.items[0].id.videoId}`);\n    // }, [title]);\n\n    const displayRatings = (ratings ? ratings.map((rating) => {\n        return (\n            <div>\n                <Typography className={classes.bold}>\n                    {rating.Source}\n                </Typography>\n                <Typography>\n                    {rating.Value}\n                </Typography>\n            </div>\n        );\n    }) : null);\n\n    // const displayGenres = (genres ? genres.map((genre) => {\n    //     return (\n    //         <Chip label={genre} />\n    //     );\n    // }) : null);\n\n    const displayTrailer = (trailerUrl ?\n        <iframe className={classes.trailer} src={trailerUrl} />\n        : null);\n\n    const customCard = (contentText, content) => {\n        return (\n            <Card square variant=\"outlined\" style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>{contentText}</Typography>\n                <Typography>{content}</Typography>\n            </Card>\n        );\n    };\n\n    return (\n        <Grid container display=\"flex\">\n            <Grid container justify=\"center\" spacing={5} style={{ margin: \"0px 0px\" }}>\n                <Grid item xs={12} sm={6} md={4}>\n                    {customCard(\"Box Office\", boxOffice)}\n                </Grid>\n                <Grid item xs={12} sm={6} md={8}>\n                    {customCard(\"Genres\", genres)}\n                </Grid>\n            </Grid>\n            <Grid container className={classes.detailMargin}>\n                <Grid item xs={12} sm={6} md={5}>\n                    <Card square variant=\"outlined\" style={{ padding: \"15px\" }}>\n                        <Typography>{displayRatings}</Typography>\n                    </Card>\n                </Grid>\n                <Grid item xs={12} sm={6} md={7}>\n                    {/* {displayTrailer} */}\n                    <iframe style={{ backgroundColor: \"pink\", height: \"100%\" }} />\n                </Grid>\n            </Grid>\n            <Grid item className={classes.detailMargin}>\n                {customCard(\"Plot\", plot)}\n            </Grid>\n\n            <Grid item xs={12} className={classes.detailMargin}>\n                {customCard(\"Director\", director)}\n                {customCard(\"Writer\", writer)}\n                {customCard(\"Actors\", actors)}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}