{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  bold: {\n    fontWeight: 600\n  }\n});\n\nconst MovieDetails = ({\n  movieId\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [actors, setActors] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [director, setDirector] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [writer, setWriter] = useState('');\n  const [ratings, setRatings] = useState([]);\n  const [plot, setPlot] = useState('');\n  const [title, setTitle] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data;\n      let genreArray = [];\n\n      if (results.Genre) {\n        genreArray = results.Genre.split(',');\n      }\n\n      setActors(results.Actors);\n      setBoxOffice(results.BoxOffice);\n      setDirector(results.Director);\n      setGenres(genreArray);\n      setWriter(results.Writer);\n      setRatings(results.Ratings);\n      setPlot(results.Plot);\n      setTitle(results.Title);\n      console.log(\"Detail response:\");\n      console.log(results);\n    };\n\n    fetchData();\n  }, [movieId]);\n  const displayRatings = ratings ? ratings.map(rating => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: rating.Source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  useEffect(() => {\n    const fetchData = async () => {\n      const searchTerm = title + \" trailer\";\n      console.log(searchTerm);\n      const response = await youtube.get('', {\n        params: {\n          i: searchTerm\n        }\n      });\n      const results = response.data;\n      console.log(\"Youtube\");\n      console.log(results); // setActors(results.Actors);\n    };\n\n    if (title) {\n      fetchData();\n    }\n  }, []);\n  const displayGenres = genres ? genres.map(genre => {\n    return /*#__PURE__*/_jsxDEV(Chip, {\n      label: genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    display: \"flex\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        style: {\n          padding: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.bold,\n          children: \"Box Office\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: boxOffice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), displayGenres]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        style: {\n          padding: \"15px\"\n        },\n        children: displayRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      square: true,\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: \"Director\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: director\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      square: true,\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: \"Writer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: writer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      square: true,\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: \"Actors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: actors\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 1,\n      style: {\n        padding: \"15px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: \"Plot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: plot\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"y3hHf+GpCrQCHPQZJJuRcWKNuns=\", false, function () {\n  return [useStyles];\n});\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Typography","omdb","youtube","Grid","Box","Button","ButtonGroup","Paper","Chip","makeStyles","useStyles","bold","fontWeight","MovieDetails","movieId","classes","actors","setActors","boxOffice","setBoxOffice","director","setDirector","genres","setGenres","writer","setWriter","ratings","setRatings","plot","setPlot","title","setTitle","fetchData","response","get","params","i","results","data","genreArray","Genre","split","Actors","BoxOffice","Director","Writer","Ratings","Plot","Title","console","log","displayRatings","map","rating","Source","Value","searchTerm","displayGenres","genre","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    bold: {\n        fontWeight: 600\n    }\n});\nconst MovieDetails = ({ movieId }) => {\n    const classes = useStyles();\n\n    const [actors, setActors] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [writer, setWriter] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [plot, setPlot] = useState('');\n    const [title, setTitle] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n            let genreArray = [];\n            if (results.Genre) {\n                genreArray = results.Genre.split(',');\n            }\n\n\n            setActors(results.Actors);\n            setBoxOffice(results.BoxOffice);\n            setDirector(results.Director);\n            setGenres(genreArray);\n            setWriter(results.Writer);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n            setTitle(results.Title);\n\n\n            console.log(\"Detail response:\");\n            console.log(results);\n        }\n        fetchData();\n    }, [movieId]);\n\n    const displayRatings = (ratings ? ratings.map((rating) => {\n        return (\n            <div>\n                <Typography className={classes.bold}>\n                    {rating.Source}\n                </Typography>\n                <Typography>\n                    {rating.Value}\n                </Typography>\n            </div>\n        );\n    }) : null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const searchTerm = title + \" trailer\";\n            console.log(searchTerm);\n            const response = await youtube.get(\n                '',\n                {\n                    params: {\n                        i: searchTerm\n                    }\n                }\n            );\n\n            const results = response.data;\n            console.log(\"Youtube\");\n            console.log(results);\n\n\n\n            // setActors(results.Actors);\n\n        }\n        if (title) {\n            fetchData();\n\n        }\n    }, []);\n\n    const displayGenres = (genres ? genres.map((genre) => {\n        return (\n            <Chip label={genre} />\n        );\n    }) : null)\n\n    return (\n        <Grid display=\"flex\">\n            <Grid container>\n\n                <Paper elevation={1} style={{ padding: \"15px\" }}>\n                    <Typography className={classes.bold}>Box Office</Typography>\n                    <Typography>{boxOffice}</Typography>\n                </Paper>\n                {displayGenres}\n\n            </Grid>\n            <Grid container>\n                <Paper elevation={1} style={{ padding: \"15px\" }}>\n                    {displayRatings}\n                </Paper>\n            </Grid>\n\n\n\n            <Paper elevation={1} square style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Director</Typography>\n                <Typography>{director}</Typography>\n            </Paper>\n\n            <Paper elevation={1} square style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Writer</Typography>\n                <Typography>{writer}</Typography>\n            </Paper>\n\n            <Paper elevation={1} square style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Actors</Typography>\n                <Typography>{actors}</Typography>\n\n            </Paper>\n\n            <Paper elevation={1} style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Plot</Typography>\n                <Typography>{plot}</Typography>\n            </Paper>\n\n\n\n        </Grid>\n    );\n};\n\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}