{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieItem.js\",\n    _s = $RefreshSig$();\n\nimport './MovieItem.css';\nimport React, { useState } from 'react';\nimport NA from '../assets/funny.jpg';\nimport omdb from '../api/omdb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieItem = ({\n  movie,\n  onNominate,\n  nominations\n}) => {\n  _s();\n\n  const movieId = movie.imdbID;\n  const [title, setTitle] = useState('');\n  const [actors, setActors] = useState('');\n  const [awards, setAwards] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [director, setDirector] = useState('');\n  const [genre, setGenre] = useState('');\n  const [metascore, setMetascore] = useState('');\n  const [plot, setPlot] = useState('');\n  const [runtime, setRuntime] = useState('');\n  const [website, setWebsite] = useState('');\n  const [writer, setWriter] = useState('');\n  const [releasedYear, setReleasedYear] = useState('');\n  const [imdbRating, setImdbRating] = useState('');\n  const [rottenTomatoesRating, setRottenTomatoesRating] = useState(''); // Extract more detailed information of the movie\n\n  const onClick = async () => {\n    const response = await omdb.get('', {\n      params: {\n        i: movieId\n      }\n    });\n    setTitle(response.data.Title);\n    setActors(response.data.Actors);\n    setAwards(response.data.Awards);\n    setBoxOffice(response.data.BoxOffice);\n    setDirector(response.data.Director);\n    setGenre(response.data.Genre);\n    setMetascore(response.data.Metascore);\n    setPlot(response.data.Plot);\n    setRuntime(response.data.Runtime);\n    setWebsite(response.data.Website);\n    setWriter(response.data.Writer);\n    setReleasedYear(response.data.Released);\n    setImdbRating(response.data.Ratings[0].Value);\n    setRottenTomatoesRating(response.data.Ratings[1].Value);\n    console.log(\"Detail response:\");\n    console.log(response);\n  };\n\n  const onNominateMovie = nominatedMovie => {\n    // Verifies if the nomination has already been nominated\n    console.log(\"Current nominations: \");\n    console.log(nominations);\n\n    if (nominations.includes(nominatedMovie)) {\n      console.log(\"Already nominated!\");\n    } else if (nominations.length < 5) {\n      console.log(\"New nomination\");\n      onNominate(nominatedMovie);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movie-item\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: movie.Title,\n      src: movie.Poster === \"N/A\" ? NA : movie.Poster\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), console.log(movie), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Title: \", title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Actors: \", actors]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            onClick();\n          },\n          children: \"Info\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => onNominateMovie(movie),\n          children: \"Nominate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)]\n  }, movie.imdbID, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieItem, \"FMNzK8wso5UWPXkOYIyDoi4fDbw=\");\n\n_c = MovieItem;\nexport default MovieItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieItem\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieItem.js"],"names":["React","useState","NA","omdb","MovieItem","movie","onNominate","nominations","movieId","imdbID","title","setTitle","actors","setActors","awards","setAwards","boxOffice","setBoxOffice","director","setDirector","genre","setGenre","metascore","setMetascore","plot","setPlot","runtime","setRuntime","website","setWebsite","writer","setWriter","releasedYear","setReleasedYear","imdbRating","setImdbRating","rottenTomatoesRating","setRottenTomatoesRating","onClick","response","get","params","i","data","Title","Actors","Awards","BoxOffice","Director","Genre","Metascore","Plot","Runtime","Website","Writer","Released","Ratings","Value","console","log","onNominateMovie","nominatedMovie","includes","length","Poster"],"mappings":"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","sourcesContent":["import './MovieItem.css';\nimport React, { useState } from 'react';\nimport NA from '../assets/funny.jpg';\nimport omdb from '../api/omdb';\n\nconst MovieItem = ({ movie, onNominate, nominations }) => {\n    const movieId = movie.imdbID;\n\n    const [title, setTitle] = useState('');\n    const [actors, setActors] = useState('');\n    const [awards, setAwards] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genre, setGenre] = useState('');\n    const [metascore, setMetascore] = useState('');\n    const [plot, setPlot] = useState('');\n    const [runtime, setRuntime] = useState('');\n    const [website, setWebsite] = useState('');\n    const [writer, setWriter] = useState('');\n    const [releasedYear, setReleasedYear] = useState('');\n    const [imdbRating, setImdbRating] = useState('');\n    const [rottenTomatoesRating, setRottenTomatoesRating] = useState('');\n\n    // Extract more detailed information of the movie\n    const onClick = async () => {\n        const response = await omdb.get(\n            '',\n            {\n                params: {\n                    i: movieId\n                }\n            }\n        );\n\n        setTitle(response.data.Title);\n        setActors(response.data.Actors);\n        setAwards(response.data.Awards);\n        setBoxOffice(response.data.BoxOffice);\n        setDirector(response.data.Director);\n        setGenre(response.data.Genre);\n        setMetascore(response.data.Metascore);\n        setPlot(response.data.Plot);\n        setRuntime(response.data.Runtime);\n        setWebsite(response.data.Website);\n        setWriter(response.data.Writer);\n        setReleasedYear(response.data.Released);\n        setImdbRating(response.data.Ratings[0].Value);\n        setRottenTomatoesRating(response.data.Ratings[1].Value);\n\n        console.log(\"Detail response:\");\n        console.log(response);\n    };\n\n    const onNominateMovie = (nominatedMovie) => {\n        // Verifies if the nomination has already been nominated\n        console.log(\"Current nominations: \");\n        console.log(nominations);\n        if (nominations.includes(nominatedMovie)) {\n            console.log(\"Already nominated!\");\n        } else if (nominations.length < 5) {\n            console.log(\"New nomination\");\n            onNominate(nominatedMovie);\n        }\n    };\n\n    return (\n        <div className=\"movie-item\" key={movie.imdbID}>\n            <img alt={movie.Title} src={movie.Poster === \"N/A\" ? NA : movie.Poster} />\n\n            {console.log(movie)}\n            <div>\n                <div>Title: {title}</div>\n                <div>Actors: {actors}</div>\n                <div>\n                    <button onClick={() => { onClick() }}>Info</button>\n                    <button onClick={() => onNominateMovie(movie)} >Nominate</button>\n                </div>\n\n            </div>\n        </div>\n    );\n};\n\nexport default MovieItem;"]},"metadata":{},"sourceType":"module"}