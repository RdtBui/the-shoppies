{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; // Material UI\n\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport ReactPlayer from 'react-player'; // API\n\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  bold: {\n    fontWeight: 600\n  },\n  detailMargin: {\n    margin: '10px 15px'\n  },\n  trailer: {\n    width: '100%'\n  },\n  awardsContainer: {\n    borderColor: '#41b3a3',\n    padding: '8px 10px',\n    width: '100%',\n    backgroundColor: '#beebd5'\n  },\n  videoContainer: {\n    position: 'relative',\n    paddingTop: '56.25%',\n    width: '100%'\n  },\n  infoIcon: {\n    color: '#41b3a3'\n  }\n});\n\nconst MovieDetails = ({\n  movieId,\n  expanded\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [actors, setActors] = useState('');\n  const [awards, setAwards] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [director, setDirector] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [plot, setPlot] = useState('');\n  const [ratings, setRatings] = useState([]);\n  const [title, setTitle] = useState('');\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const [writer, setWriter] = useState(''); // API request to get detailed movie information\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data;\n      setActors(results.Actors);\n      setAwards(results.Awards);\n      setBoxOffice(results.BoxOffice);\n      setGenres(results.Genre);\n      setDirector(results.Director);\n      setRatings(results.Ratings);\n      setPlot(results.Plot);\n      setTitle(results.Title);\n      setWriter(results.Writer);\n    };\n\n    fetchData();\n  }, [movieId]); // YouTube API request for trailer videos\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const searchTerm = title + ' trailer';\n      console.log(searchTerm);\n      const response = await youtube.get('/search', {\n        params: {\n          q: searchTerm\n        }\n      });\n      const results = response.data;\n      console.log('Sent an API request to YouTube');\n      console.log(results);\n      setTrailerUrl(`https://youtube.com/embed/${results.items[0].id.videoId}`);\n    };\n\n    fetchData();\n  }, [expanded, title]);\n  const displayRatings = ratings ? ratings.map(rating => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: rating.Source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 23\n      }, this)]\n    }, rating.Value + rating.Source, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }, this);\n  }) : null;\n  const displayTrailer = trailerUrl ? /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: 'relative',\n      paddingTop: '56.25%',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactPlayer, {\n      width: \"100%\",\n      height: \"100%\",\n      style: {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      },\n      url: trailerUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this) : null;\n\n  const customCard = (contentText, content) => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      square: true,\n      variant: \"outlined\",\n      style: {\n        padding: '15px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: contentText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    display: \"flex\",\n    className: classes.detailMargin,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justify: \"center\",\n      spacing: 5,\n      style: {\n        margin: '0px -5px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        children: customCard('Box Office', boxOffice)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 8,\n        children: customCard('Genres', genres)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.detailMargin,\n      children: awards === 'N/A' ? '' : /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        container: true,\n        xs: 12,\n        alignContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          className: classes.awardsContainer,\n          borderLeft: 3,\n          display: \"flex\",\n          children: [/*#__PURE__*/_jsxDEV(InfoTwoToneIcon, {\n            className: classes.infoIcon,\n            style: {\n              marginRight: '7px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            children: awards\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.detailMargin,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 12,\n        md: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          square: true,\n          variant: \"outlined\",\n          style: {\n            padding: '15px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              item: true,\n              xs: 12,\n              sm: 12,\n              md: 4,\n              children: [' ', /*#__PURE__*/_jsxDEV(Typography, {\n                children: displayRatings\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 33\n              }, this), ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              item: true,\n              xs: 12,\n              sm: 12,\n              md: 8,\n              display: \"flex\",\n              children: displayTrailer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      className: classes.detailMargin,\n      children: customCard('Plot', plot)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      className: classes.detailMargin,\n      children: [customCard('Director', director), customCard('Writer', writer), customCard('Actors', actors)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"FkT+yAzJrEIiF5tmN7IMfIh1rJM=\", false, function () {\n  return [useStyles];\n});\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Box","Card","Grid","InfoTwoToneIcon","makeStyles","Typography","ReactPlayer","omdb","youtube","useStyles","bold","fontWeight","detailMargin","margin","trailer","width","awardsContainer","borderColor","padding","backgroundColor","videoContainer","position","paddingTop","infoIcon","color","MovieDetails","movieId","expanded","classes","actors","setActors","awards","setAwards","boxOffice","setBoxOffice","director","setDirector","genres","setGenres","plot","setPlot","ratings","setRatings","title","setTitle","trailerUrl","setTrailerUrl","writer","setWriter","fetchData","response","get","params","i","results","data","Actors","Awards","BoxOffice","Genre","Director","Ratings","Plot","Title","Writer","searchTerm","console","log","q","items","id","videoId","displayRatings","map","rating","Source","Value","displayTrailer","top","left","customCard","contentText","content","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Material UI\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport Grid from '@material-ui/core/Grid';\nimport InfoTwoToneIcon from '@material-ui/icons/InfoTwoTone';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport ReactPlayer from 'react-player';\n\n// API\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\n\nconst useStyles = makeStyles({\n    bold: {\n        fontWeight: 600,\n    },\n    detailMargin: {\n        margin: '10px 15px',\n    },\n    trailer: {\n        width: '100%',\n    },\n    awardsContainer: {\n        borderColor: '#41b3a3',\n        padding: '8px 10px',\n        width: '100%',\n        backgroundColor: '#beebd5',\n    },\n    videoContainer: {\n        position: 'relative',\n        paddingTop: '56.25%',\n        width: '100%',\n    },\n    infoIcon: {\n        color: '#41b3a3',\n    },\n});\n\nconst MovieDetails = ({ movieId, expanded }) => {\n    const classes = useStyles();\n    const [actors, setActors] = useState('');\n    const [awards, setAwards] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [plot, setPlot] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [title, setTitle] = useState('');\n    const [trailerUrl, setTrailerUrl] = useState('');\n    const [writer, setWriter] = useState('');\n\n    // API request to get detailed movie information\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get('', {\n                params: {\n                    i: movieId,\n                },\n            });\n\n            const results = response.data;\n\n            setActors(results.Actors);\n            setAwards(results.Awards);\n            setBoxOffice(results.BoxOffice);\n            setGenres(results.Genre);\n            setDirector(results.Director);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n            setTitle(results.Title);\n            setWriter(results.Writer);\n        };\n        fetchData();\n    }, [movieId]);\n\n    // YouTube API request for trailer videos\n    useEffect(() => {\n        const fetchData = async () => {\n            const searchTerm = title + ' trailer';\n            console.log(searchTerm);\n            const response = await youtube.get('/search', {\n                params: {\n                    q: searchTerm,\n                },\n            });\n            const results = response.data;\n\n            console.log('Sent an API request to YouTube');\n            console.log(results);\n            setTrailerUrl(\n                `https://youtube.com/embed/${results.items[0].id.videoId}`\n            );\n        };\n        fetchData();\n    }, [expanded, title]);\n\n    const displayRatings = ratings\n        ? ratings.map(rating => {\n              return (\n                  <div key={rating.Value + rating.Source}>\n                      <Typography className={classes.bold}>\n                          {rating.Source}\n                      </Typography>\n                      <Typography>{rating.Value}</Typography>\n                  </div>\n              );\n          })\n        : null;\n\n    const displayTrailer = trailerUrl ? (\n        <div\n            style={{\n                position: 'relative',\n                paddingTop: '56.25%',\n                width: '100%',\n            }}\n        >\n            <ReactPlayer\n                width='100%'\n                height='100%'\n                style={{ position: 'absolute', top: '0', left: '0' }}\n                url={trailerUrl}\n            />\n        </div>\n    ) : null;\n\n    const customCard = (contentText, content) => {\n        return (\n            <Card square variant='outlined' style={{ padding: '15px' }}>\n                <Typography className={classes.bold}>{contentText}</Typography>\n                <Typography>{content}</Typography>\n            </Card>\n        );\n    };\n\n    return (\n        <Grid container display='flex' className={classes.detailMargin}>\n            <Grid\n                container\n                justify='center'\n                spacing={5}\n                style={{ margin: '0px -5px' }}\n            >\n                <Grid item xs={12} sm={6} md={4}>\n                    {customCard('Box Office', boxOffice)}\n                </Grid>\n                <Grid item xs={12} sm={6} md={8}>\n                    {customCard('Genres', genres)}\n                </Grid>\n            </Grid>\n\n            <Grid container className={classes.detailMargin}>\n                {awards === 'N/A' ? (\n                    ''\n                ) : (\n                    <Grid item container xs={12} alignContent='center'>\n                        <Box\n                            className={classes.awardsContainer}\n                            borderLeft={3}\n                            display='flex'\n                        >\n                            <InfoTwoToneIcon\n                                className={classes.infoIcon}\n                                style={{ marginRight: '7px' }}\n                            />\n                            <Typography>{awards}</Typography>\n                        </Box>\n                    </Grid>\n                )}\n            </Grid>\n\n            <Grid container className={classes.detailMargin}>\n                <Grid item xs={12} sm={12} md={12}>\n                    <Card square variant='outlined' style={{ padding: '15px' }}>\n                        <Grid container>\n                            <Grid container item xs={12} sm={12} md={4}>\n                                {' '}\n                                <Typography>{displayRatings}</Typography>{' '}\n                            </Grid>\n                            <Grid\n                                container\n                                item\n                                xs={12}\n                                sm={12}\n                                md={8}\n                                display='flex'\n                            >\n                                {displayTrailer}\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </Grid>\n\n            <Grid item className={classes.detailMargin}>\n                {customCard('Plot', plot)}\n            </Grid>\n\n            <Grid item xs={12} className={classes.detailMargin}>\n                {customCard('Director', director)}\n                {customCard('Writer', writer)}\n                {customCard('Actors', actors)}\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default MovieDetails;\n"]},"metadata":{},"sourceType":"module"}