{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieDetails = ({\n  movieId\n}) => {\n  _s();\n\n  const [actors, setActors] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [country, setCountry] = useState('');\n  const [director, setDirector] = useState('');\n  const [genre, setGenre] = useState('');\n  const [runtime, setRuntime] = useState('');\n  const [writer, setWriter] = useState('');\n  const [releasedDate, setReleasedDate] = useState('');\n  const [ratings, setRatings] = useState([]);\n  const [plot, setPlot] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data;\n      setActors(results.Actors);\n      setBoxOffice(results.BoxOffice);\n      setCountry(results.Country);\n      setDirector(results.Director);\n      setGenre(results.Genre);\n      setRuntime(results.Runtime);\n      setWriter(results.Writer);\n      setReleasedDate(results.Released);\n      setRatings(results.Ratings);\n      setPlot(results.Plot);\n      console.log(\"Detail response:\");\n      console.log(results);\n    };\n\n    fetchData();\n  }, [movieId]);\n  const displayRatings = ratings ? ratings.map(rating => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Chip, {\n      label: `${genre}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Plot: \", plot]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), displayRatings, /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Actors: \", actors]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Box Office: \", boxOffice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Director: \", director]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Writer: \", writer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"RABAkM+zXsxTvxQv0YZWvQOtvio=\");\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Typography","omdb","Grid","Box","Chip","MovieDetails","movieId","actors","setActors","boxOffice","setBoxOffice","country","setCountry","director","setDirector","genre","setGenre","runtime","setRuntime","writer","setWriter","releasedDate","setReleasedDate","ratings","setRatings","plot","setPlot","fetchData","response","get","params","i","results","data","Actors","BoxOffice","Country","Director","Genre","Runtime","Writer","Released","Ratings","Plot","console","log","displayRatings","map","rating","Source","Value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\n\nconst MovieDetails = ({ movieId }) => {\n\n    const [actors, setActors] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [country, setCountry] = useState('');\n    const [director, setDirector] = useState('');\n    const [genre, setGenre] = useState('');\n    const [runtime, setRuntime] = useState('');\n    const [writer, setWriter] = useState('');\n    const [releasedDate, setReleasedDate] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [plot, setPlot] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n\n            setActors(results.Actors);\n            setBoxOffice(results.BoxOffice);\n            setCountry(results.Country);\n            setDirector(results.Director);\n            setGenre(results.Genre);\n            setRuntime(results.Runtime);\n            setWriter(results.Writer);\n            setReleasedDate(results.Released);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n\n            console.log(\"Detail response:\");\n            console.log(results);\n        }\n        fetchData();\n    }, [movieId]);\n\n    const displayRatings = (ratings ? ratings.map((rating) => {\n        return (\n            <div>\n                <Typography>\n                    {rating.Source}\n                </Typography>\n                <Typography>\n                    {rating.Value}\n                </Typography>\n            </div>\n        );\n    }) : null);\n\n    return (\n        <div>\n            <Typography>{genre}</Typography>\n            <Chip label={`${genre}`}></Chip>\n            <Typography>Plot: {plot}</Typography>\n            {displayRatings}\n            <Typography>Actors: {actors}</Typography>\n            <Typography>Box Office: {boxOffice}</Typography>\n            <Typography>Director: {director}</Typography>\n            <Typography>Writer: {writer}</Typography>\n        </div>\n    );\n};\n\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}