{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport { FilmData } from './FilmData';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles'; // import classes from '*.module.css';\n\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    width: 400\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1\n  },\n  iconButton: {\n    padding: 10\n  }\n}));\nconst filter = createFilterOptions();\n\nconst SearchBar = ({\n  onTermSubmit\n}) => {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  const classes = useStyles();\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    onTermSubmit(value.title);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    children: [/*#__PURE__*/_jsxDEV(IconButton, {\n      type: \"submit\",\n      className: classes.iconButton,\n      \"aria-label\": \"search\",\n      children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Autocomplete, {\n      value: value,\n      onChange: (event, newValue) => {\n        if (typeof newValue === 'string') {\n          setValue({\n            title: newValue\n          });\n        } else if (newValue && newValue.inputValue) {\n          // Create a new value from the user input\n          setValue({\n            title: newValue.inputValue\n          });\n        } else {\n          setValue(newValue);\n        }\n      },\n      filterOptions: (options, params) => {\n        const filtered = filter(options, params); // Suggest the creation of a new value\n\n        if (params.inputValue !== '') {\n          filtered.push({\n            inputValue: params.inputValue,\n            title: `Add \"${params.inputValue}\"`\n          });\n        }\n\n        return filtered;\n      },\n      selectOnFocus: true,\n      clearOnBlur: true,\n      handleHomeEndKeys: true,\n      id: \"free-solo-with-text-demo\",\n      options: FilmData,\n      getOptionLabel: option => {\n        // Value selected with enter, right from the input\n        if (typeof option === 'string') {\n          return option;\n        } // Add \"xxx\" option created dynamically\n\n\n        if (option.inputValue) {\n          return option.inputValue;\n        } // Regular option\n\n\n        return option.title;\n      },\n      renderOption: option => option.title,\n      style: {\n        width: 300\n      },\n      freeSolo: true,\n      renderInput: params => /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: onFormSubmit,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          size: \"small\",\n          variant: \"filled\",\n          ...params,\n          label: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"YvnzwsirSDocjv+sNh2pPCNg3uc=\", false, function () {\n  return [useStyles];\n});\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/SearchBar.js"],"names":["React","useState","SearchIcon","TextField","Autocomplete","createFilterOptions","Grid","FilmData","Paper","makeStyles","ThemeProvider","InputBase","IconButton","useStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","filter","SearchBar","onTermSubmit","value","setValue","classes","onFormSubmit","event","preventDefault","title","newValue","inputValue","options","params","filtered","push","option"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport { FilmData } from './FilmData';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\n// import classes from '*.module.css';\nimport InputBase from '@material-ui/core/InputBase';\nimport IconButton from '@material-ui/core/IconButton';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n}));\n\nconst filter = createFilterOptions();\n\n\n\nconst SearchBar = ({ onTermSubmit }) => {\n    const [value, setValue] = React.useState(null);\n\n    const classes = useStyles();\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        onTermSubmit(value.title);\n    };\n\n    return (\n        <Paper>\n            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n                <SearchIcon />\n            </IconButton>\n            <Autocomplete\n                value={value}\n                onChange={(event, newValue) => {\n                    if (typeof newValue === 'string') {\n                        setValue({\n                            title: newValue,\n                        });\n                    } else if (newValue && newValue.inputValue) {\n                        // Create a new value from the user input\n                        setValue({\n                            title: newValue.inputValue,\n                        });\n                    } else {\n                        setValue(newValue);\n                    }\n                }}\n                filterOptions={(options, params) => {\n                    const filtered = filter(options, params);\n\n                    // Suggest the creation of a new value\n                    if (params.inputValue !== '') {\n                        filtered.push({\n                            inputValue: params.inputValue,\n                            title: `Add \"${params.inputValue}\"`,\n                        });\n                    }\n\n                    return filtered;\n                }}\n                selectOnFocus\n                clearOnBlur\n                handleHomeEndKeys\n                id=\"free-solo-with-text-demo\"\n                options={FilmData}\n                getOptionLabel={(option) => {\n                    // Value selected with enter, right from the input\n                    if (typeof option === 'string') {\n                        return option;\n                    }\n                    // Add \"xxx\" option created dynamically\n                    if (option.inputValue) {\n                        return option.inputValue;\n                    }\n                    // Regular option\n                    return option.title;\n                }}\n                renderOption={(option) => option.title}\n                style={{ width: 300 }}\n                freeSolo\n                renderInput={(params) => (\n                    <form onSubmit={onFormSubmit}>\n                        <TextField\n                            size=\"small\"\n                            variant=\"filled\"\n                            {...params}\n                            label=\"Search\"\n                        />\n                    </form>\n                )}\n            />\n\n        </Paper>\n\n\n\n    );\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}