{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  bold: {\n    fontWeight: 600\n  },\n  detailMargin: {\n    margin: \"25px 30px\"\n  },\n  trailer: {\n    width: \"100%\" // height: \"100%\",\n\n  }\n});\n\nconst MovieDetails = ({\n  movieId,\n  expanded\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [actors, setActors] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [director, setDirector] = useState('');\n  const [genres, setGenres] = useState([]);\n  const [writer, setWriter] = useState('');\n  const [ratings, setRatings] = useState([]);\n  const [plot, setPlot] = useState('');\n  const [title, setTitle] = useState('');\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data;\n      let genreArray = [];\n\n      if (results.Genre) {\n        genreArray = results.Genre.split(',');\n      }\n\n      setActors(results.Actors);\n      setBoxOffice(results.BoxOffice);\n      setDirector(results.Director);\n      setGenres(genreArray);\n      setWriter(results.Writer);\n      setRatings(results.Ratings);\n      setPlot(results.Plot);\n      setTitle(results.Title);\n      console.log(\"Detail response:\");\n      console.log(results);\n    };\n\n    fetchData();\n  }, [movieId]); // // YouTube API request for trailers, consumes quota\n  // useEffect(async () => {\n  //     const searchTerm = title + \" trailer\";\n  //     console.log(searchTerm);\n  //     const response = await youtube.get(\n  //         '/search',\n  //         {\n  //             params: {\n  //                 q: searchTerm\n  //             }\n  //         }\n  //     );\n  //     const results = response.data;\n  //     setTrailerUrl(`https://youtube.com/embed/${results.items[0].id.videoId}`);\n  // }, [title]);\n\n  const displayRatings = ratings ? ratings.map(rating => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.bold,\n        children: rating.Source\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: rating.Value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  const displayGenres = genres ? genres.map(genre => {\n    return /*#__PURE__*/_jsxDEV(Chip, {\n      label: genre\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }) : null;\n  const displayTrailer = trailerUrl ? /*#__PURE__*/_jsxDEV(\"iframe\", {\n    className: classes.trailer,\n    src: trailerUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this) : null;\n\n  const customCard = (contentText, content) => {\n    return /*#__PURE__*/_jsxDEV(Card, {\n      raised: \"False\",\n      square: true,\n      style: {\n        padding: \"15px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.bold,\n          children: contentText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    display: \"flex\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.detailMargin,\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        style: {\n          padding: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.bold,\n          children: \"Box Office\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: boxOffice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        children: displayGenres\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.detailMargin,\n      children: [/*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 1,\n        style: {\n          padding: \"15px\",\n          marginRight: \"90px\"\n        },\n        children: displayRatings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), displayTrailer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.detailMargin,\n      children: customCard(\"Plot\", plot)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.detailMargin,\n      children: [customCard(\"Director\", director), customCard(\"Writer\", writer), customCard(\"Actors\", actors)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"Q7nR1KlkA5nnbWKk/TbLtNAhZhU=\", false, function () {\n  return [useStyles];\n});\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Typography","omdb","youtube","Grid","Box","Button","ButtonGroup","Paper","Chip","Card","makeStyles","useStyles","bold","fontWeight","detailMargin","margin","trailer","width","MovieDetails","movieId","expanded","classes","actors","setActors","boxOffice","setBoxOffice","director","setDirector","genres","setGenres","writer","setWriter","ratings","setRatings","plot","setPlot","title","setTitle","trailerUrl","setTrailerUrl","fetchData","response","get","params","i","results","data","genreArray","Genre","split","Actors","BoxOffice","Director","Writer","Ratings","Plot","Title","console","log","displayRatings","map","rating","Source","Value","displayGenres","genre","displayTrailer","customCard","contentText","content","padding","marginRight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    bold: {\n        fontWeight: 600\n    },\n    detailMargin: {\n        margin: \"25px 30px\",\n    },\n    trailer: {\n        width: \"100%\",\n        // height: \"100%\",\n    },\n});\n\nconst MovieDetails = ({ movieId, expanded }) => {\n    const classes = useStyles();\n\n    const [actors, setActors] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [writer, setWriter] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [plot, setPlot] = useState('');\n    const [title, setTitle] = useState('');\n    const [trailerUrl, setTrailerUrl] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n            let genreArray = [];\n            if (results.Genre) {\n                genreArray = results.Genre.split(',');\n            }\n\n            setActors(results.Actors);\n            setBoxOffice(results.BoxOffice);\n            setDirector(results.Director);\n            setGenres(genreArray);\n            setWriter(results.Writer);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n            setTitle(results.Title);\n\n            console.log(\"Detail response:\");\n            console.log(results);\n        }\n        fetchData();\n    }, [movieId]);\n\n    // // YouTube API request for trailers, consumes quota\n    // useEffect(async () => {\n    //     const searchTerm = title + \" trailer\";\n    //     console.log(searchTerm);\n    //     const response = await youtube.get(\n    //         '/search',\n    //         {\n    //             params: {\n    //                 q: searchTerm\n    //             }\n    //         }\n    //     );\n    //     const results = response.data;\n    //     setTrailerUrl(`https://youtube.com/embed/${results.items[0].id.videoId}`);\n    // }, [title]);\n\n    const displayRatings = (ratings ? ratings.map((rating) => {\n        return (\n            <div>\n                <Typography className={classes.bold}>\n                    {rating.Source}\n                </Typography>\n                <Typography>\n                    {rating.Value}\n                </Typography>\n            </div>\n        );\n    }) : null);\n\n    const displayGenres = (genres ? genres.map((genre) => {\n        return (\n            <Chip label={genre} />\n        );\n    }) : null);\n\n    const displayTrailer = (trailerUrl ?\n        <iframe className={classes.trailer} src={trailerUrl} />\n        : null);\n\n    const customCard = (contentText, content) => {\n        return (\n            <Card raised=\"False\" square style={{ padding: \"15px\" }}>\n                <span>\n                    <Typography className={classes.bold}>{contentText}</Typography>\n                    <Typography>{content}</Typography>\n                </span>\n            </Card>\n        );\n    };\n\n    return (\n        <Grid display=\"flex\">\n            <Grid container className={classes.detailMargin}>\n                <Paper elevation={1} style={{ padding: \"15px\" }}>\n                    <Typography className={classes.bold}>Box Office</Typography>\n                    <Typography>{boxOffice}</Typography>\n                </Paper>\n                <Grid item>\n                    {displayGenres}\n                </Grid>\n\n            </Grid>\n            <Grid container className={classes.detailMargin}>\n                <Paper elevation={1} style={{ padding: \"15px\", marginRight: \"90px\" }}>\n                    {displayRatings}\n                </Paper>\n                {displayTrailer}\n            </Grid>\n\n            <div className={classes.detailMargin}>\n                {customCard(\"Plot\", plot)}\n            </div>\n\n            <div className={classes.detailMargin}>\n                {customCard(\"Director\", director)}\n                {customCard(\"Writer\", writer)}\n                {customCard(\"Actors\", actors)}\n            </div>\n        </Grid>\n    );\n};\n\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}