{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/AccordionItem.js\",\n    _s = $RefreshSig$();\n\nimport './MovieItem.css';\nimport React, { useState } from 'react';\nimport NA from '../assets/funny.jpg';\nimport omdb from '../api/omdb';\nimport Button from '@material-ui/core/Button';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%'\n  },\n  heading: {\n    flexBasis: '33.33%',\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary\n  }\n}));\n\nconst AccordionItem = ({\n  movie,\n  onNominate,\n  nominations,\n  panelIndex\n}) => {\n  _s();\n\n  const movieId = movie.imdbID;\n  const [title, setTitle] = useState('');\n  const [actors, setActors] = useState('');\n  const [awards, setAwards] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [country, setCountry] = useState('');\n  const [director, setDirector] = useState('');\n  const [genre, setGenre] = useState('');\n  const [metascore, setMetascore] = useState('');\n  const [plot, setPlot] = useState('');\n  const [runtime, setRuntime] = useState('');\n  const [writer, setWriter] = useState('');\n  const [releasedYear, setReleasedYear] = useState('');\n  const [imdbRating, setImdbRating] = useState('');\n  const [rottenTomatoesRating, setRottenTomatoesRating] = useState(''); // from accordionlist\n\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = panel => (event, isExpanded) => {\n    setExpanded(isExpanded ? panel : false);\n  }; // Extract more detailed information of the movie\n\n\n  const onClick = async () => {\n    const response = await omdb.get('', {\n      params: {\n        i: movieId\n      }\n    });\n    setTitle(response.data.Title);\n    setActors(response.data.Actors);\n    setAwards(response.data.Awards);\n    setBoxOffice(response.data.BoxOffice);\n    setCountry(response.data.Country);\n    setDirector(response.data.Director);\n    setGenre(response.data.Genre);\n    setMetascore(response.data.Metascore);\n    setPlot(response.data.Plot);\n    setRuntime(response.data.Runtime);\n    setWriter(response.data.Writer);\n    setReleasedYear(response.data.Released); // setImdbRating(response.data.Ratings[0].Value);\n    // setRottenTomatoesRating(response.data.Ratings[1].Value);\n\n    console.log(\"Detail response:\");\n    console.log(response);\n  };\n\n  const onNominateMovie = nominatedMovie => {\n    // Verifies if the nomination has already been nominated\n    console.log(\"Current nominations: \");\n    console.log(nominations);\n\n    if (nominations.includes(nominatedMovie)) {\n      console.log(\"Already nominated!\");\n    } else if (nominations.length < 5) {\n      console.log(\"New nomination\");\n      onNominate(nominatedMovie);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    expanded: expanded === `panel${panelIndex}`,\n    onChange: handleChange(`panel${panelIndex}`),\n    children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n      expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 29\n      }, this),\n      \"aria-controls\": `panel${panelIndex}bh-content`,\n      id: `panel${panelIndex}bh-header`,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: classes.heading,\n        src: movie.Poster\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.secondaryHeading,\n        children: movie.Title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam eget maximus est, id dignissim quam.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this) // <div className=\"movie-item\" key={movie.imdbID}>\n  //     <img alt={movie.Title} src={movie.Poster === \"N/A\" ? NA : movie.Poster} />\n  //     {console.log(movie)}\n  //     <div>\n  //         <div>Title: {title}</div>\n  //         <div>Actors: {actors}</div>\n  //         <div>Awards: {awards}</div>\n  //         <div>Box Office: {boxOffice}</div>\n  //         <div>Country: {country}</div>\n  //         <div>Director: {director}</div>\n  //         <div>Genre: {genre}</div>\n  //         <div>Metascore: {metascore}</div>\n  //         <div>Plot: {plot}</div>\n  //         <div>Runtime: {runtime}</div>\n  //         <div>Writer: {writer}</div>\n  //         <div>ReleasedYear: {releasedYear}</div>\n  //         <div>IMDb Rating: {imdbRating}</div>\n  //         <div>Rotten Tomatoes Rating: {rottenTomatoesRating}</div>\n  //         <div>\n  //             <Button\n  //                 endIcon={<FavoriteIcon />}\n  //                 size=\"small\"\n  //                 variant=\"contained\"\n  //                 color=\"secondary\"\n  //                 onClick={() => onNominateMovie(movie)} >Nominate</Button>\n  //             <Button\n  //                 endIcon={<InfoIcon />}\n  //                 size=\"small\"\n  //                 variant=\"contained\"\n  //                 color=\"primary\"\n  //                 onClick={() => { onClick() }}\n  //             >Info</Button>\n  //         </div>\n  //     </div>\n  // </div>\n  ;\n};\n\n_s(AccordionItem, \"qXTWHYfO+chNg/DtvkCQhz8Lew4=\", false, function () {\n  return [useStyles];\n});\n\n_c = AccordionItem;\nexport default AccordionItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccordionItem\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/AccordionItem.js"],"names":["React","useState","NA","omdb","Button","InfoIcon","FavoriteIcon","Accordion","AccordionDetails","AccordionSummary","Typography","ExpandMoreIcon","useStyles","makeStyles","theme","root","width","heading","flexBasis","flexShrink","secondaryHeading","fontSize","typography","pxToRem","color","palette","text","secondary","AccordionItem","movie","onNominate","nominations","panelIndex","movieId","imdbID","title","setTitle","actors","setActors","awards","setAwards","boxOffice","setBoxOffice","country","setCountry","director","setDirector","genre","setGenre","metascore","setMetascore","plot","setPlot","runtime","setRuntime","writer","setWriter","releasedYear","setReleasedYear","imdbRating","setImdbRating","rottenTomatoesRating","setRottenTomatoesRating","classes","expanded","setExpanded","handleChange","panel","event","isExpanded","onClick","response","get","params","i","data","Title","Actors","Awards","BoxOffice","Country","Director","Genre","Metascore","Plot","Runtime","Writer","Released","console","log","onNominateMovie","nominatedMovie","includes","length","Poster"],"mappings":"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","sourcesContent":["import './MovieItem.css';\nimport React, { useState } from 'react';\nimport NA from '../assets/funny.jpg';\nimport omdb from '../api/omdb';\nimport Button from '@material-ui/core/Button';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\n\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n}));\n\nconst AccordionItem = ({ movie, onNominate, nominations, panelIndex }) => {\n    const movieId = movie.imdbID;\n\n    const [title, setTitle] = useState('');\n    const [actors, setActors] = useState('');\n    const [awards, setAwards] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [country, setCountry] = useState('');\n    const [director, setDirector] = useState('');\n    const [genre, setGenre] = useState('');\n    const [metascore, setMetascore] = useState('');\n    const [plot, setPlot] = useState('');\n    const [runtime, setRuntime] = useState('');\n    const [writer, setWriter] = useState('');\n    const [releasedYear, setReleasedYear] = useState('');\n    const [imdbRating, setImdbRating] = useState('');\n    const [rottenTomatoesRating, setRottenTomatoesRating] = useState('');\n\n    // from accordionlist\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n    // Extract more detailed information of the movie\n    const onClick = async () => {\n        const response = await omdb.get(\n            '',\n            {\n                params: {\n                    i: movieId\n                }\n            }\n        );\n\n        setTitle(response.data.Title);\n        setActors(response.data.Actors);\n        setAwards(response.data.Awards);\n        setBoxOffice(response.data.BoxOffice);\n        setCountry(response.data.Country);\n        setDirector(response.data.Director);\n        setGenre(response.data.Genre);\n        setMetascore(response.data.Metascore);\n        setPlot(response.data.Plot);\n        setRuntime(response.data.Runtime);\n        setWriter(response.data.Writer);\n        setReleasedYear(response.data.Released);\n        // setImdbRating(response.data.Ratings[0].Value);\n        // setRottenTomatoesRating(response.data.Ratings[1].Value);\n\n        console.log(\"Detail response:\");\n        console.log(response);\n    };\n\n    const onNominateMovie = (nominatedMovie) => {\n        // Verifies if the nomination has already been nominated\n        console.log(\"Current nominations: \");\n        console.log(nominations);\n        if (nominations.includes(nominatedMovie)) {\n            console.log(\"Already nominated!\");\n        } else if (nominations.length < 5) {\n            console.log(\"New nomination\");\n            onNominate(nominatedMovie);\n        }\n    };\n\n    return (\n        <Accordion expanded={expanded === `panel${panelIndex}`} onChange={handleChange(`panel${panelIndex}`)}>\n            <AccordionSummary\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls={`panel${panelIndex}bh-content`}\n                id={`panel${panelIndex}bh-header`}\n            >\n                <img className={classes.heading} src={movie.Poster}></img>\n                <Typography className={classes.secondaryHeading}>{movie.Title}</Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n                <Typography>\n                    Nulla facilisi. Phasellus sollicitudin nulla et quam mattis feugiat. Aliquam eget\n                    maximus est, id dignissim quam.\n                    </Typography>\n            </AccordionDetails>\n        </Accordion>\n        // <div className=\"movie-item\" key={movie.imdbID}>\n        //     <img alt={movie.Title} src={movie.Poster === \"N/A\" ? NA : movie.Poster} />\n\n        //     {console.log(movie)}\n        //     <div>\n        //         <div>Title: {title}</div>\n        //         <div>Actors: {actors}</div>\n        //         <div>Awards: {awards}</div>\n        //         <div>Box Office: {boxOffice}</div>\n        //         <div>Country: {country}</div>\n        //         <div>Director: {director}</div>\n        //         <div>Genre: {genre}</div>\n        //         <div>Metascore: {metascore}</div>\n        //         <div>Plot: {plot}</div>\n        //         <div>Runtime: {runtime}</div>\n        //         <div>Writer: {writer}</div>\n        //         <div>ReleasedYear: {releasedYear}</div>\n        //         <div>IMDb Rating: {imdbRating}</div>\n        //         <div>Rotten Tomatoes Rating: {rottenTomatoesRating}</div>\n        //         <div>\n        //             <Button\n        //                 endIcon={<FavoriteIcon />}\n        //                 size=\"small\"\n        //                 variant=\"contained\"\n        //                 color=\"secondary\"\n        //                 onClick={() => onNominateMovie(movie)} >Nominate</Button>\n        //             <Button\n        //                 endIcon={<InfoIcon />}\n        //                 size=\"small\"\n        //                 variant=\"contained\"\n        //                 color=\"primary\"\n        //                 onClick={() => { onClick() }}\n        //             >Info</Button>\n        //         </div>\n        //     </div>\n        // </div>\n    );\n};\n\nexport default AccordionItem;"]},"metadata":{},"sourceType":"module"}