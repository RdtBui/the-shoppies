{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport { FilmData } from './FilmData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions();\n\nconst SearchBar = ({\n  onTermSubmit\n}) => {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    onTermSubmit(value.title);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"flex-end\",\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        value: value,\n        onChange: (event, newValue) => {\n          if (typeof newValue === 'string') {\n            setValue({\n              title: newValue\n            });\n          } else if (newValue && newValue.inputValue) {\n            // Create a new value from the user input\n            setValue({\n              title: newValue.inputValue\n            });\n          } else {\n            setValue(newValue);\n          }\n        },\n        filterOptions: (options, params) => {\n          const filtered = filter(options, params); // Suggest the creation of a new value\n\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`\n            });\n          }\n\n          return filtered;\n        },\n        selectOnFocus: true,\n        clearOnBlur: true,\n        handleHomeEndKeys: true,\n        id: \"free-solo-with-text-demo\",\n        options: FilmData,\n        getOptionLabel: option => {\n          // Value selected with enter, right from the input\n          if (typeof option === 'string') {\n            return option;\n          } // Add \"xxx\" option created dynamically\n\n\n          if (option.inputValue) {\n            return option.inputValue;\n          } // Regular option\n\n\n          return option.title;\n        },\n        renderOption: option => option.title,\n        style: {\n          width: 300\n        },\n        freeSolo: true,\n        renderInput: params => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: onFormSubmit,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            size: \"small\",\n            variant: \"filled\",\n            ...params,\n            label: \"Search\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"EEjdpY/CSe7/lDQurV9yi1RbKSs=\");\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/SearchBar.js"],"names":["React","useState","SearchIcon","TextField","Autocomplete","createFilterOptions","Grid","FilmData","filter","SearchBar","onTermSubmit","value","setValue","onFormSubmit","event","preventDefault","title","newValue","inputValue","options","params","filtered","push","option","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport { FilmData } from './FilmData';\n\nconst filter = createFilterOptions();\n\nconst SearchBar = ({ onTermSubmit }) => {\n    const [value, setValue] = React.useState(null);\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        onTermSubmit(value.title);\n    };\n\n    return (\n        <Grid container spacing={1} alignItems=\"flex-end\">\n\n            <Grid item>\n                <Autocomplete\n                    value={value}\n                    onChange={(event, newValue) => {\n                        if (typeof newValue === 'string') {\n                            setValue({\n                                title: newValue,\n                            });\n                        } else if (newValue && newValue.inputValue) {\n                            // Create a new value from the user input\n                            setValue({\n                                title: newValue.inputValue,\n                            });\n                        } else {\n                            setValue(newValue);\n                        }\n                    }}\n                    filterOptions={(options, params) => {\n                        const filtered = filter(options, params);\n\n                        // Suggest the creation of a new value\n                        if (params.inputValue !== '') {\n                            filtered.push({\n                                inputValue: params.inputValue,\n                                title: `Add \"${params.inputValue}\"`,\n                            });\n                        }\n\n                        return filtered;\n                    }}\n                    selectOnFocus\n                    clearOnBlur\n                    handleHomeEndKeys\n                    id=\"free-solo-with-text-demo\"\n                    options={FilmData}\n                    getOptionLabel={(option) => {\n                        // Value selected with enter, right from the input\n                        if (typeof option === 'string') {\n                            return option;\n                        }\n                        // Add \"xxx\" option created dynamically\n                        if (option.inputValue) {\n                            return option.inputValue;\n                        }\n                        // Regular option\n                        return option.title;\n                    }}\n                    renderOption={(option) => option.title}\n                    style={{ width: 300 }}\n                    freeSolo\n                    renderInput={(params) => (\n                        <form onSubmit={onFormSubmit}>\n                            <TextField\n                                size=\"small\"\n                                variant=\"filled\"\n                                {...params}\n                                label=\"Search\"\n                                variant=\"outlined\"\n                            />\n                        </form>\n                    )}\n                />\n            </Grid>\n            <Grid item>\n                <SearchIcon />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}