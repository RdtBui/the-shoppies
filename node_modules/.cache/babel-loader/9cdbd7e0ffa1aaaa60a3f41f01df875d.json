{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/SearchBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst filter = createFilterOptions(); // const SearchBar = ({ onTermSubmit }) => {\n//     const [term, setTerm] = useState('');\n// const onInputChange = (event) => {\n//     setTerm(event.target.value);\n// };\n// const onFormSubmit = (event) => {\n//     event.preventDefault();\n//     onTermSubmit(term);\n// };\n//     return (\n//         <div>\n//             <form onSubmit={onFormSubmit}>\n//                 <div>\n//                     <label>Search a Movie</label>\n//                     <input type=\"text\" value={term} onChange={onInputChange} />\n//                 </div>\n//             </form>\n//         </div>\n//     );\n// };\n\nconst SearchBar = ({\n  onTermSubmit\n}) => {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  const [term, setTerm] = useState('');\n\n  const onInputChange = event => {\n    setTerm(event.target.value);\n  };\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    onTermSubmit(value.title);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    value: value,\n    onChange: (event, newValue) => {\n      if (typeof newValue === 'string') {\n        setValue({\n          title: newValue\n        });\n      } else if (newValue && newValue.inputValue) {\n        // Create a new value from the user input\n        setValue({\n          title: newValue.inputValue\n        });\n      } else {\n        setValue(newValue);\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params); // Suggest the creation of a new value\n\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`\n        });\n      }\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    id: \"free-solo-with-text-demo\",\n    options: top100Films,\n    getOptionLabel: option => {\n      // Value selected with enter, right from the input\n      if (typeof option === 'string') {\n        return option;\n      } // Add \"xxx\" option created dynamically\n\n\n      if (option.inputValue) {\n        return option.inputValue;\n      } // Regular option\n\n\n      return option.title;\n    },\n    renderOption: option => option.title,\n    style: {\n      width: 300\n    },\n    freeSolo: true,\n    renderInput: params => /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onFormSubmit,\n      children: /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        label: \"Search\",\n        variant: \"outlined\",\n        onChange: onInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchBar, \"nWxTFOgEwrsN9DS6Qep9Gsg/y/c=\");\n\n_c = SearchBar;\nconst top100Films = [{\n  title: 'The Shawshank Redemption'\n}, {\n  title: 'The Godfather'\n}, {\n  title: 'The Godfather: Part II'\n}, {\n  title: 'The Dark Knight'\n}, {\n  title: '12 Angry Men'\n}, {\n  title: \"Schindler's List\"\n}, {\n  title: 'Pulp Fiction'\n}, {\n  title: 'The Lord of the Rings: The Return of the King'\n}, {\n  title: 'The Good, the Bad and the Ugly'\n}, {\n  title: 'Fight Club'\n}, {\n  title: 'The Lord of the Rings: The Fellowship of the Ring'\n}, {\n  title: 'Star Wars: Episode V - The Empire Strikes Back'\n}, {\n  title: 'Forrest Gump'\n}, {\n  title: 'Inception'\n}, {\n  title: 'The Lord of the Rings: The Two Towers'\n}, {\n  title: \"One Flew Over the Cuckoo's Nest\"\n}, {\n  title: 'Goodfellas'\n}, {\n  title: 'The Matrix'\n}, {\n  title: 'Seven Samurai'\n}, {\n  title: 'Star Wars: Episode IV - A New Hope'\n}, {\n  title: 'City of God'\n}, {\n  title: 'Se7en'\n}, {\n  title: 'The Silence of the Lambs'\n}, {\n  title: \"It's a Wonderful Life\"\n}, {\n  title: 'Life Is Beautiful'\n}, {\n  title: 'The Usual Suspects'\n}, {\n  title: 'Léon: The Professional'\n}, {\n  title: 'Spirited Away'\n}, {\n  title: 'Saving Private Ryan'\n}, {\n  title: 'Once Upon a Time in the West'\n}, {\n  title: 'American History X'\n}, {\n  title: 'Interstellar'\n}, {\n  title: 'Casablanca'\n}, {\n  title: 'City Lights'\n}, {\n  title: 'Psycho'\n}, {\n  title: 'The Green Mile'\n}, {\n  title: 'The Intouchables'\n}, {\n  title: 'Modern Times'\n}, {\n  title: 'Raiders of the Lost Ark'\n}, {\n  title: 'Rear Window'\n}, {\n  title: 'The Pianist'\n}, {\n  title: 'The Departed'\n}, {\n  title: 'Terminator 2: Judgment Day'\n}, {\n  title: 'Back to the Future'\n}, {\n  title: 'Whiplash'\n}, {\n  title: 'Gladiator'\n}, {\n  title: 'Memento'\n}, {\n  title: 'The Prestige'\n}, {\n  title: 'The Lion King'\n}, {\n  title: 'Apocalypse Now'\n}, {\n  title: 'Alien'\n}, {\n  title: 'Sunset Boulevard'\n}, {\n  title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb'\n}, {\n  title: 'The Great Dictator'\n}, {\n  title: 'Cinema Paradiso'\n}, {\n  title: 'The Lives of Others'\n}, {\n  title: 'Grave of the Fireflies'\n}, {\n  title: 'Paths of Glory'\n}, {\n  title: 'Django Unchained'\n}, {\n  title: 'The Shining'\n}, {\n  title: 'WALL·E'\n}, {\n  title: 'American Beauty'\n}, {\n  title: 'The Dark Knight Rises'\n}, {\n  title: 'Princess Mononoke'\n}, {\n  title: 'Aliens'\n}, {\n  title: 'Oldboy'\n}, {\n  title: 'Once Upon a Time in America'\n}, {\n  title: 'Witness for the Prosecution'\n}, {\n  title: 'Das Boot'\n}, {\n  title: 'Citizen Kane'\n}, {\n  title: 'North by Northwest'\n}, {\n  title: 'Vertigo'\n}, {\n  title: 'Star Wars: Episode VI - Return of the Jedi'\n}, {\n  title: 'Reservoir Dogs'\n}, {\n  title: 'Braveheart'\n}, {\n  title: 'M'\n}, {\n  title: 'Requiem for a Dream'\n}, {\n  title: 'Amélie'\n}, {\n  title: 'A Clockwork Orange'\n}, {\n  title: 'Like Stars on Earth'\n}, {\n  title: 'Taxi Driver'\n}, {\n  title: 'Lawrence of Arabia'\n}, {\n  title: 'Double Indemnity'\n}, {\n  title: 'Eternal Sunshine of the Spotless Mind'\n}, {\n  title: 'Amadeus'\n}, {\n  title: 'To Kill a Mockingbird'\n}, {\n  title: 'Toy Story 3'\n}, {\n  title: 'Logan'\n}, {\n  title: 'Full Metal Jacket'\n}, {\n  title: 'Dangal'\n}, {\n  title: 'The Sting'\n}, {\n  title: '2001: A Space Odyssey'\n}, {\n  title: \"Singin' in the Rain\"\n}, {\n  title: 'Toy Story'\n}, {\n  title: 'Bicycle Thieves'\n}, {\n  title: 'The Kid'\n}, {\n  title: 'Inglourious Basterds'\n}, {\n  title: 'Snatch'\n}, {\n  title: '3 Idiots'\n}, {\n  title: 'Monty Python and the Holy Grail'\n}];\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/SearchBar.js"],"names":["React","useState","SearchIcon","TextField","Autocomplete","createFilterOptions","filter","SearchBar","onTermSubmit","value","setValue","term","setTerm","onInputChange","event","target","onFormSubmit","preventDefault","title","newValue","inputValue","options","params","filtered","push","top100Films","option","width"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\n\nconst filter = createFilterOptions();\n\n// const SearchBar = ({ onTermSubmit }) => {\n//     const [term, setTerm] = useState('');\n\n// const onInputChange = (event) => {\n//     setTerm(event.target.value);\n// };\n\n// const onFormSubmit = (event) => {\n//     event.preventDefault();\n\n//     onTermSubmit(term);\n// };\n\n//     return (\n//         <div>\n//             <form onSubmit={onFormSubmit}>\n//                 <div>\n//                     <label>Search a Movie</label>\n//                     <input type=\"text\" value={term} onChange={onInputChange} />\n//                 </div>\n//             </form>\n//         </div>\n//     );\n// };\n\nconst SearchBar = ({ onTermSubmit }) => {\n    const [value, setValue] = React.useState(null);\n    const [term, setTerm] = useState('');\n\n\n    const onInputChange = (event) => {\n        setTerm(event.target.value);\n    };\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        onTermSubmit(value.title);\n    };\n\n    return (\n        <Autocomplete\n            value={value}\n            onChange={(event, newValue) => {\n                if (typeof newValue === 'string') {\n                    setValue({\n                        title: newValue,\n                    });\n                } else if (newValue && newValue.inputValue) {\n                    // Create a new value from the user input\n                    setValue({\n                        title: newValue.inputValue,\n                    });\n                } else {\n                    setValue(newValue);\n                }\n            }}\n            filterOptions={(options, params) => {\n                const filtered = filter(options, params);\n\n                // Suggest the creation of a new value\n                if (params.inputValue !== '') {\n                    filtered.push({\n                        inputValue: params.inputValue,\n                        title: `Add \"${params.inputValue}\"`,\n                    });\n                }\n\n                return filtered;\n            }}\n            selectOnFocus\n            clearOnBlur\n            handleHomeEndKeys\n            id=\"free-solo-with-text-demo\"\n            options={top100Films}\n            getOptionLabel={(option) => {\n                // Value selected with enter, right from the input\n                if (typeof option === 'string') {\n                    return option;\n                }\n                // Add \"xxx\" option created dynamically\n                if (option.inputValue) {\n                    return option.inputValue;\n                }\n                // Regular option\n                return option.title;\n            }}\n            renderOption={(option) => option.title}\n            style={{ width: 300 }}\n            freeSolo\n            renderInput={(params) => (\n                <form onSubmit={onFormSubmit}>\n                    <TextField {...params} label=\"Search\" variant=\"outlined\" onChange={onInputChange} />\n                </form>\n            )}\n        />\n    );\n}\n\n\nconst top100Films = [\n    { title: 'The Shawshank Redemption' },\n    { title: 'The Godfather' },\n    { title: 'The Godfather: Part II' },\n    { title: 'The Dark Knight' },\n    { title: '12 Angry Men' },\n    { title: \"Schindler's List\" },\n    { title: 'Pulp Fiction' },\n    { title: 'The Lord of the Rings: The Return of the King' },\n    { title: 'The Good, the Bad and the Ugly' },\n    { title: 'Fight Club' },\n    { title: 'The Lord of the Rings: The Fellowship of the Ring' },\n    { title: 'Star Wars: Episode V - The Empire Strikes Back' },\n    { title: 'Forrest Gump' },\n    { title: 'Inception' },\n    { title: 'The Lord of the Rings: The Two Towers' },\n    { title: \"One Flew Over the Cuckoo's Nest\" },\n    { title: 'Goodfellas' },\n    { title: 'The Matrix' },\n    { title: 'Seven Samurai' },\n    { title: 'Star Wars: Episode IV - A New Hope' },\n    { title: 'City of God' },\n    { title: 'Se7en' },\n    { title: 'The Silence of the Lambs' },\n    { title: \"It's a Wonderful Life\" },\n    { title: 'Life Is Beautiful' },\n    { title: 'The Usual Suspects' },\n    { title: 'Léon: The Professional' },\n    { title: 'Spirited Away' },\n    { title: 'Saving Private Ryan' },\n    { title: 'Once Upon a Time in the West' },\n    { title: 'American History X' },\n    { title: 'Interstellar' },\n    { title: 'Casablanca' },\n    { title: 'City Lights' },\n    { title: 'Psycho' },\n    { title: 'The Green Mile' },\n    { title: 'The Intouchables' },\n    { title: 'Modern Times' },\n    { title: 'Raiders of the Lost Ark' },\n    { title: 'Rear Window' },\n    { title: 'The Pianist' },\n    { title: 'The Departed' },\n    { title: 'Terminator 2: Judgment Day' },\n    { title: 'Back to the Future' },\n    { title: 'Whiplash' },\n    { title: 'Gladiator' },\n    { title: 'Memento' },\n    { title: 'The Prestige' },\n    { title: 'The Lion King' },\n    { title: 'Apocalypse Now' },\n    { title: 'Alien' },\n    { title: 'Sunset Boulevard' },\n    { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb' },\n    { title: 'The Great Dictator' },\n    { title: 'Cinema Paradiso' },\n    { title: 'The Lives of Others' },\n    { title: 'Grave of the Fireflies' },\n    { title: 'Paths of Glory' },\n    { title: 'Django Unchained' },\n    { title: 'The Shining' },\n    { title: 'WALL·E' },\n    { title: 'American Beauty' },\n    { title: 'The Dark Knight Rises' },\n    { title: 'Princess Mononoke' },\n    { title: 'Aliens' },\n    { title: 'Oldboy' },\n    { title: 'Once Upon a Time in America' },\n    { title: 'Witness for the Prosecution' },\n    { title: 'Das Boot' },\n    { title: 'Citizen Kane' },\n    { title: 'North by Northwest' },\n    { title: 'Vertigo' },\n    { title: 'Star Wars: Episode VI - Return of the Jedi' },\n    { title: 'Reservoir Dogs' },\n    { title: 'Braveheart' },\n    { title: 'M' },\n    { title: 'Requiem for a Dream' },\n    { title: 'Amélie' },\n    { title: 'A Clockwork Orange' },\n    { title: 'Like Stars on Earth' },\n    { title: 'Taxi Driver' },\n    { title: 'Lawrence of Arabia' },\n    { title: 'Double Indemnity' },\n    { title: 'Eternal Sunshine of the Spotless Mind' },\n    { title: 'Amadeus' },\n    { title: 'To Kill a Mockingbird' },\n    { title: 'Toy Story 3' },\n    { title: 'Logan' },\n    { title: 'Full Metal Jacket' },\n    { title: 'Dangal' },\n    { title: 'The Sting' },\n    { title: '2001: A Space Odyssey' },\n    { title: \"Singin' in the Rain\" },\n    { title: 'Toy Story' },\n    { title: 'Bicycle Thieves' },\n    { title: 'The Kid' },\n    { title: 'Inglourious Basterds' },\n    { title: 'Snatch' },\n    { title: '3 Idiots' },\n    { title: 'Monty Python and the Holy Grail' },\n];\n\nexport default SearchBar;"]},"metadata":{},"sourceType":"module"}