{"ast":null,"code":"var _jsxFileName = \"/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieDetails = ({\n  movieId\n}) => {\n  _s();\n\n  const [actors, setActors] = useState('');\n  const [awards, setAwards] = useState('');\n  const [boxOffice, setBoxOffice] = useState('');\n  const [country, setCountry] = useState('');\n  const [director, setDirector] = useState('');\n  const [genre, setGenre] = useState('');\n  const [metascore, setMetascore] = useState('');\n  const [runtime, setRuntime] = useState('');\n  const [writer, setWriter] = useState('');\n  const [releasedDate, setReleasedDate] = useState('');\n  const [ratings, setRatings] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const response = await omdb.get('', {\n        params: {\n          i: movieId\n        }\n      });\n      const results = response.data;\n      setActors(results.Actors);\n      setAwards(results.Awards);\n      setBoxOffice(results.BoxOffice);\n      setCountry(results.Country);\n      setDirector(results.Director);\n      setGenre(results.Genre);\n      setMetascore(results.Metascore);\n      setRuntime(results.Runtime);\n      setWriter(results.Writer);\n      setReleasedDate(results.Released); // setRatings(results.Ratings);\n\n      console.log(ratings);\n      console.log(\"Detail response:\");\n      console.log(response);\n    };\n\n    fetchData();\n  }, [movieId]); // }, [movieId, ratings]);\n  // const displayRatings = ratings.map((rating) => {\n  //     return (\n  //         <div>\n  //             <Typography>\n  //                 {rating.Source}\n  //             </Typography>\n  //             <Typography>\n  //                 {rating.Value}\n  //             </Typography>\n  //         </div>\n  //     );\n  // });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Actors: \", actors]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Awards: \", awards]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Box Office: \", boxOffice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Country: \", country]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Director: \", director]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Genre: \", genre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Metascore: \", metascore]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Runtime: \", runtime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Writer: \", writer]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      children: [\"Date of Release: \", releasedDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MovieDetails, \"cGBL3jiDKB4Wv9yxEpX7yjNxc8g=\");\n\n_c = MovieDetails;\nexport default MovieDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieDetails\");","map":{"version":3,"sources":["/home/richard/Development/reactjs/beta-shoppies/src/components/MovieDetails.js"],"names":["React","useState","useEffect","Typography","omdb","MovieDetails","movieId","actors","setActors","awards","setAwards","boxOffice","setBoxOffice","country","setCountry","director","setDirector","genre","setGenre","metascore","setMetascore","runtime","setRuntime","writer","setWriter","releasedDate","setReleasedDate","ratings","setRatings","fetchData","response","get","params","i","results","data","Actors","Awards","BoxOffice","Country","Director","Genre","Metascore","Runtime","Writer","Released","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\n\nconst MovieDetails = ({ movieId }) => {\n\n    const [actors, setActors] = useState('');\n    const [awards, setAwards] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [country, setCountry] = useState('');\n    const [director, setDirector] = useState('');\n    const [genre, setGenre] = useState('');\n    const [metascore, setMetascore] = useState('');\n    const [runtime, setRuntime] = useState('');\n    const [writer, setWriter] = useState('');\n    const [releasedDate, setReleasedDate] = useState('');\n    const [ratings, setRatings] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n\n            setActors(results.Actors);\n            setAwards(results.Awards);\n            setBoxOffice(results.BoxOffice);\n            setCountry(results.Country);\n            setDirector(results.Director);\n            setGenre(results.Genre);\n            setMetascore(results.Metascore);\n            setRuntime(results.Runtime);\n            setWriter(results.Writer);\n            setReleasedDate(results.Released);\n            // setRatings(results.Ratings);\n            console.log(ratings);\n\n            console.log(\"Detail response:\");\n            console.log(response);\n        }\n        fetchData();\n    }, [movieId]);\n    // }, [movieId, ratings]);\n\n    // const displayRatings = ratings.map((rating) => {\n    //     return (\n    //         <div>\n    //             <Typography>\n    //                 {rating.Source}\n    //             </Typography>\n    //             <Typography>\n    //                 {rating.Value}\n    //             </Typography>\n    //         </div>\n    //     );\n\n    // });\n\n    return (\n        <div>\n\n\n            <Typography>Actors: {actors}</Typography>\n            <Typography>Awards: {awards}</Typography>\n            <Typography>Box Office: {boxOffice}</Typography>\n            <Typography>Country: {country}</Typography>\n            <Typography>Director: {director}</Typography>\n            <Typography>Genre: {genre}</Typography>\n            <Typography>Metascore: {metascore}</Typography>\n            <Typography>Runtime: {runtime}</Typography>\n            <Typography>Writer: {writer}</Typography>\n            <Typography>Date of Release: {releasedDate}</Typography>\n        </div>\n    );\n};\n\nexport default MovieDetails;"]},"metadata":{},"sourceType":"module"}