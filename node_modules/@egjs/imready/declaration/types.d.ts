import Component from "@egjs/component";
import Loader from "./loaders/Loader";
export interface ImReadyOptions {
    prefix: string;
    loaders: Record<string, new (target: HTMLElement, options: ImReadyLoaderOptions) => Loader>;
}
export interface ImReadyLoaderInterface extends Component {
    check(): boolean;
}
export interface ImReadyLoaderOptions {
    prefix: string;
}
export interface ElementInfo {
    element: HTMLElement;
    loader: Loader | null;
    hasError: boolean;
    isPreReady: boolean;
    hasLoading: boolean;
    isReady: boolean;
    isSkip: boolean;
}
export interface AutoSizerElement extends HTMLElement {
    __PREFIX__?: string;
}
export interface ArrayFormat<T> {
    [index: number]: T;
    length: number;
}
export declare type OnError = {
    element: HTMLElement;
    index: number;
    target: HTMLElement;
    errorCount: number;
    totalErrorCount: number;
};
export declare type ReadyElement = {
    preReadyCount: number;
    readyCount: number;
    totalCount: number;
    isPreReady: boolean;
    isReady: boolean;
};
export declare type OnPreReadyElement = {
    element: HTMLElement;
    index: number;
    preReadyCount: number;
    readyCount: number;
    totalCount: number;
    hasLoading: boolean;
    isPreReady: boolean;
    isReady: boolean;
    isSkip: boolean;
};
export declare type OnReadyElement = {
    element: HTMLElement;
    index: number;
    preReadyCount: number;
    readyCount: number;
    errorCount: number;
    totalErrorCount: number;
    totalCount: number;
    hasLoading: boolean;
    isPreReady: boolean;
    isReady: boolean;
    hasError: boolean;
    isPreReadyOver: boolean;
    isSkip: boolean;
};
export declare type OnPreReady = {
    readyCount: number;
    totalCount: number;
    isReady: boolean;
    hasLoading: boolean;
};
export declare type OnReady = {
    errorCount: number;
    totalErrorCount: number;
    totalCount: number;
};
export declare type ImReadyEvents = {
    preReadyElement: OnPreReadyElement;
    readyElement: OnReadyElement;
    error: OnError;
    preReady: OnPreReady;
    ready: OnReady;
};
export declare type OnLoaderError = {
    element: HTMLElement;
    target: HTMLElement;
};
export declare type OnLoaderPreReady = {
    element: HTMLElement;
    hasLoading: boolean;
    isSkip: boolean;
};
export declare type OnLoaderReady = {
    element: HTMLElement;
    withPreReady: boolean;
    hasLoading: boolean;
    isSkip: boolean;
};
export declare type ImReadyLoaderEvents = {
    error: OnLoaderError;
    ready: OnLoaderReady;
    preReady: OnLoaderPreReady;
    [key: string]: any;
};
