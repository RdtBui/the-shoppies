{"version":3,"sources":["components/FilmData.js","components/SearchBar.js","components/NominationItem.js","components/NominationList.js","assets/funny.jpg","api/omdb.js","api/youtube.js","components/MovieDetails.js","components/AlertWarning.js","components/MovieItem.js","components/MovieList.js","App.js","index.js"],"names":["FilmData","title","useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","searchIcon","searchBar","paddingTop","paddingBottom","paddingRight","filter","createFilterOptions","SearchBar","onTermSubmit","searchError","classes","React","useState","value","setValue","errorMessage","setErrorMessage","useEffect","onFormSubmit","event","preventDefault","Paper","className","Autocomplete","onChange","newValue","inputValue","filterOptions","options","params","filtered","push","selectOnFocus","clearOnBlur","handleHomeEndKeys","id","getOptionLabel","option","renderOption","style","freeSolo","renderInput","Grid","container","direction","item","xs","sm","md","justify","justifyContent","fontSize","onSubmit","TextField","error","helperText","size","variant","label","margin","NominationItem","nomination","onRemoveNomination","Slide","in","mountOnEnter","unmountOnExit","square","Title","Button","color","aria-label","onClick","paperPadding","NominationList","nominations","renderedList","map","imdbID","length","backgroundColor","axios","create","baseURL","part","type","maxResults","key","bold","fontWeight","MovieDetails","movieId","expanded","actors","setActors","boxOffice","setBoxOffice","director","setDirector","genres","setGenres","writer","setWriter","ratings","setRatings","plot","setPlot","setTitle","trailerUrl","a","omdb","get","i","response","results","data","genreArray","Genre","split","Actors","BoxOffice","Director","Writer","Ratings","Plot","console","log","fetchData","displayRatings","rating","Typography","Source","Value","displayGenres","genre","Chip","displayTrailer","src","elevation","Alert","props","marginTop","CustomizedSnackbars","handleOpen","handleClose","Snackbar","open","autoHideDuration","onClose","severity","heading","flexBasis","flexShrink","secondaryHeading","palette","text","secondary","MovieItem","movie","onNominate","panelIndex","handleChange","awards","setAwards","runtime","setRuntime","releasedYear","setReleasedYear","country","setCountry","isDisable","setIsDisable","openAlert","setOpenAlert","Awards","Runtime","Year","Country","includes","Accordion","AccordionSummary","expandIcon","aria-controls","alt","Poster","NA","Box","flexDirection","stopPropagation","onFocus","cursor","endIcon","disabled","nominatedMovie","Divider","AccordionDetails","reason","MovieList","movies","setExpanded","panel","isExpanded","index","indexOf","Collapse","App","setMovies","setNominations","setSearchError","term","s","Response","Error","Search","Container","maxWidth","newList","movieItem","oldNominations","ReactDOM","render","document","querySelector"],"mappings":"0TAAaA,EAAW,CACpB,CAAEC,MAAO,4BACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,0BACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,iDACT,CAAEA,MAAO,kCACT,CAAEA,MAAO,cACT,CAAEA,MAAO,qDACT,CAAEA,MAAO,kDACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,aACT,CAAEA,MAAO,yCACT,CAAEA,MAAO,mCACT,CAAEA,MAAO,cACT,CAAEA,MAAO,cACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,sCACT,CAAEA,MAAO,eACT,CAAEA,MAAO,SACT,CAAEA,MAAO,4BACT,CAAEA,MAAO,yBACT,CAAEA,MAAO,qBACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,6BACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,gCACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,cACT,CAAEA,MAAO,eACT,CAAEA,MAAO,UACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,2BACT,CAAEA,MAAO,eACT,CAAEA,MAAO,eACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,8BACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,YACT,CAAEA,MAAO,aACT,CAAEA,MAAO,WACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,iBACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,SACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,wEACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,0BACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,eACT,CAAEA,MAAO,aACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,yBACT,CAAEA,MAAO,qBACT,CAAEA,MAAO,UACT,CAAEA,MAAO,UACT,CAAEA,MAAO,+BACT,CAAEA,MAAO,+BACT,CAAEA,MAAO,YACT,CAAEA,MAAO,gBACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,8CACT,CAAEA,MAAO,kBACT,CAAEA,MAAO,cACT,CAAEA,MAAO,KACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,aACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,eACT,CAAEA,MAAO,sBACT,CAAEA,MAAO,oBACT,CAAEA,MAAO,yCACT,CAAEA,MAAO,WACT,CAAEA,MAAO,yBACT,CAAEA,MAAO,eACT,CAAEA,MAAO,SACT,CAAEA,MAAO,qBACT,CAAEA,MAAO,UACT,CAAEA,MAAO,aACT,CAAEA,MAAO,yBACT,CAAEA,MAAO,uBACT,CAAEA,MAAO,aACT,CAAEA,MAAO,mBACT,CAAEA,MAAO,WACT,CAAEA,MAAO,wBACT,CAAEA,MAAO,UACT,CAAEA,MAAO,YACT,CAAEA,MAAO,oC,yBCzFPC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,KAEXC,MAAO,CACHC,WAAYP,EAAMQ,QAAQ,GAC1BC,KAAM,GAEVC,WAAY,CACRR,QAAS,IAEbS,UAAW,CACPC,WAAY,GACZC,cAAe,GACfC,aAAc,QAIhBC,EAASC,cAqGAC,EAlGG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACzBC,EAAUtB,IAEhB,EAA0BuB,IAAMC,SAAS,MAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwCH,IAAMC,UAAS,GAAvD,mBAAOG,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WAEFD,EADgB,KAAhBP,GACgBA,KAIrB,CAACA,IAGJ,IAAMS,EAAe,SAACC,GAClBA,EAAMC,iBAENZ,EAAaK,EAAM1B,QAGvB,OACI,cAACkC,EAAA,EAAD,CAAOC,UAAWZ,EAAQT,UAA1B,SACI,cAACsB,EAAA,EAAD,CACIV,MAAOA,EACPW,SAAU,SAACL,EAAOM,GACU,kBAAbA,EACPX,EAAS,CACL3B,MAAOsC,IAEJA,GAAYA,EAASC,WAE5BZ,EAAS,CACL3B,MAAOsC,EAASC,aAGpBZ,EAASW,IAGjBE,cAAe,SAACC,EAASC,GACrB,IAAMC,EAAWzB,EAAOuB,EAASC,GAUjC,MAP0B,KAAtBA,EAAOH,YACPI,EAASC,KAAK,CACVL,WAAYG,EAAOH,WACnBvC,MAAM,QAAD,OAAU0C,EAAOH,WAAjB,OAINI,GAEXE,eAAa,EACbC,aAAW,EACXC,mBAAiB,EACjBC,GAAG,2BACHP,QAAS1C,EACTkD,eAAgB,SAACC,GAEb,MAAsB,kBAAXA,EACAA,EAGPA,EAAOX,WACAW,EAAOX,WAGXW,EAAOlD,OAElBmD,aAAc,SAACD,GAAD,OAAYA,EAAOlD,OACjCoD,MAAO,CAAE5C,MAAO,QAChB6C,UAAQ,EACRC,YAAa,SAACZ,GAAD,OACT,eAACa,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAAMlD,WAAW,SAA3C,UACI,cAACgD,EAAA,EAAD,CAAMC,WAAS,EAACE,MAAI,EAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,QAAQ,SAAlD,SACI,cAAC,IAAD,CAAYC,eAAe,SAASC,SAAS,QAAQ7B,UAAWZ,EAAQV,eAE5E,cAAC0C,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAA/B,SACI,sBAAMI,SAAUlC,EAAhB,SACI,cAACmC,EAAA,EAAD,aACIC,QAAOvC,EACPwC,WAAYxC,GAA8B,GAC1CyC,KAAK,QACLC,QAAQ,WACRC,MAAM,iBAENC,OAAO,SACH9B,iB,kBCpGzB+B,EAjBQ,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,WAAYC,EAAyB,EAAzBA,mBAClC,OACI,cAACC,EAAA,EAAD,CAAOnB,UAAU,KAAKoB,IAAI,EAAMC,cAAY,EAACC,eAAa,EAA1D,SACI,eAAC7C,EAAA,EAAD,CAAO8C,QAAM,EAACV,QAAQ,WAAWlB,MAAO,CAAE/C,QAAS,QAAnD,UACI,8BAAMqE,EAAWO,QACjB,cAACC,EAAA,EAAD,CACIb,KAAK,QACLC,QAAQ,YACRa,MAAM,YAHV,kBAIA,cAACD,EAAA,EAAD,CAAQE,aAAW,SAASC,QAAS,kBAAMV,EAAmBD,IAA9D,0BCRVzE,EAAYC,YAAW,CACzBoF,aAAc,CACVjF,QAAS,UA0BFkF,EAvBQ,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,YAAab,EAAyB,EAAzBA,mBAC7BpD,EAAUtB,IAEVwF,EAAeD,EAAYE,KAAI,SAAChB,GAClC,OACI,cAAC,EAAD,CAAwCA,WAAYA,EAAYC,mBAAoBA,GAA/DD,EAAWiB,WAIxC,OAA2B,IAAvBH,EAAYI,OAER,cAAC1D,EAAA,EAAD,CAAOoC,QAAQ,WAAWnC,UAAWZ,EAAQ+D,aAA7C,sCAKJ,sBAAKlC,MAAO,CAAEyC,gBAAiB,SAA/B,yBAEKJ,MC7BE,G,OAAA,IAA0B,mC,iBCK1BK,MAAMC,OAAO,CACxBC,QAAQ,kCAAD,OAHC,c,2FCCGF,IAAMC,OAAO,CACxBC,QAAS,wCACTtD,OAAQ,CACJuD,KAAM,UACNC,KAAM,QACNC,WAAY,EACZC,IARI,6C,QCUNnG,EAAYC,YAAW,CACzBmG,KAAM,CACFC,WAAY,OAiILC,EA9HM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QACdjF,GADsC,EAAfkF,SACbxG,KAEhB,EAA4BwB,mBAAS,IAArC,mBAAOiF,EAAP,KAAeC,EAAf,KACA,EAAkClF,mBAAS,IAA3C,mBAAOmF,EAAP,KAAkBC,EAAlB,KACA,EAAgCpF,mBAAS,IAAzC,mBAAOqF,EAAP,KAAiBC,EAAjB,KACA,EAA4BtF,mBAAS,IAArC,mBAAOuF,EAAP,KAAeC,EAAf,KACA,EAA4BxF,mBAAS,IAArC,mBAAOyF,EAAP,KAAeC,EAAf,KACA,EAA8B1F,mBAAS,IAAvC,mBAAO2F,EAAP,KAAgBC,EAAhB,KACA,EAAwB5F,mBAAS,IAAjC,mBAAO6F,EAAP,KAAaC,EAAb,KACA,EAA0B9F,mBAAS,IAAnC,mBAAc+F,GAAd,WACA,EAAoC/F,mBAAS,IAA7C,mBAAOgG,EAAP,UAGA3F,qBAAU,YACS,uCAAG,gCAAA4F,EAAA,sEACSC,EAAKC,IACxB,GACA,CACIlF,OAAQ,CACJmF,EAAGrB,KALD,OACRsB,EADQ,OAURC,EAAUD,EAASE,KACrBC,EAAa,GACbF,EAAQG,QACRD,EAAaF,EAAQG,MAAMC,MAAM,MAGrCxB,EAAUoB,EAAQK,QAClBvB,EAAakB,EAAQM,WACrBtB,EAAYgB,EAAQO,UACpBrB,EAAUgB,GACVd,EAAUY,EAAQQ,QAClBlB,EAAWU,EAAQS,SACnBjB,EAAQQ,EAAQU,MAChBjB,EAASO,EAAQ9C,OAEjByD,QAAQC,IAAI,oBACZD,QAAQC,IAAIZ,GA1BE,4CAAH,qDA4Bfa,KACD,CAACpC,IAkBJ,IAAMqC,EAAkBzB,EAAUA,EAAQ1B,KAAI,SAACoD,GAC3C,OACI,gCACI,cAACC,EAAA,EAAD,CAAY5G,UAAWZ,EAAQ8E,KAA/B,SACKyC,EAAOE,SAEZ,cAACD,EAAA,EAAD,UACKD,EAAOG,cAInB,KAECC,EAAiBlC,EAASA,EAAOtB,KAAI,SAACyD,GACxC,OACI,cAACC,EAAA,EAAD,CAAM7E,MAAO4E,OAEhB,KAECE,EAAkB5B,EACpB,wBAAQ6B,IAAK7B,IACX,KAEN,OACI,eAAClE,EAAA,EAAD,CAAMjD,QAAQ,OAAd,UACI,eAACiD,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,eAACtB,EAAA,EAAD,CAAOqH,UAAW,EAAGnG,MAAO,CAAE/C,QAAS,QAAvC,UACI,cAAC0I,EAAA,EAAD,CAAY5G,UAAWZ,EAAQ8E,KAA/B,wBACA,cAAC0C,EAAA,EAAD,UAAanC,OAEhBsC,KAGL,eAAC3F,EAAA,EAAD,CAAMC,WAAS,EAAf,UACI,cAACtB,EAAA,EAAD,CAAOqH,UAAW,EAAGnG,MAAO,CAAE/C,QAAS,QAAvC,SACKwI,IAEJQ,KAGL,eAACnH,EAAA,EAAD,CAAOqH,UAAW,EAAGvE,QAAM,EAAC5B,MAAO,CAAE/C,QAAS,QAA9C,UACI,cAAC0I,EAAA,EAAD,CAAY5G,UAAWZ,EAAQ8E,KAA/B,sBACA,cAAC0C,EAAA,EAAD,UAAajC,OAGjB,eAAC5E,EAAA,EAAD,CAAOqH,UAAW,EAAGvE,QAAM,EAAC5B,MAAO,CAAE/C,QAAS,QAA9C,UACI,cAAC0I,EAAA,EAAD,CAAY5G,UAAWZ,EAAQ8E,KAA/B,oBACA,cAAC0C,EAAA,EAAD,UAAa7B,OAGjB,eAAChF,EAAA,EAAD,CAAOqH,UAAW,EAAGvE,QAAM,EAAC5B,MAAO,CAAE/C,QAAS,QAA9C,UACI,cAAC0I,EAAA,EAAD,CAAY5G,UAAWZ,EAAQ8E,KAA/B,oBACA,cAAC0C,EAAA,EAAD,UAAarC,OAIjB,eAACxE,EAAA,EAAD,CAAOqH,UAAW,EAAGnG,MAAO,CAAE/C,QAAS,QAAvC,UACI,cAAC0I,EAAA,EAAD,CAAY5G,UAAWZ,EAAQ8E,KAA/B,kBACA,cAAC0C,EAAA,EAAD,UAAazB,W,kBCpI7B,SAASkC,EAAMC,GACX,OAAO,cAAC,IAAD,aAAUF,UAAW,EAAGjF,QAAQ,UAAamF,IAGxD,IAAMxJ,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFI,MAAO,OACP,YAAa,CACTkJ,UAAWvJ,EAAMQ,QAAQ,SAKtB,SAASgJ,EAAT,GAA2D,IAA5BC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,YAChDtI,EAAUtB,IAEhB,OACI,qBAAKkC,UAAWZ,EAAQnB,KAAxB,SACI,cAAC0J,EAAA,EAAD,CAAUC,KAAMH,EAAYI,iBAAkB,IAAMC,QAASJ,EAA7D,SACI,cAAC,EAAD,CAAOI,QAASJ,EAAaK,SAAS,UAAtC,+CCDhB,IAAMjK,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFI,MAAO,QAEX2J,QAAS,CACLC,UAAW,SACXC,WAAY,GAEhBC,iBAAkB,CAEdnF,MAAOhF,EAAMoK,QAAQC,KAAKC,eAgInBC,GA3HG,SAAC,GAA4E,IAA1EC,EAAyE,EAAzEA,MAAOC,EAAkE,EAAlEA,WAAYpF,EAAsD,EAAtDA,YAAaqF,EAAyC,EAAzCA,WAAYpE,EAA6B,EAA7BA,SAAUqE,EAAmB,EAAnBA,aAEjEtE,EAAUmE,EAAMhF,OACtB,EAA0BlE,mBAAS,IAAnC,mBAAOzB,EAAP,KAAcwH,EAAd,KACA,EAA4B/F,mBAAS,IAArC,mBAAOsJ,EAAP,KAAeC,EAAf,KACA,EAA8BvJ,mBAAS,IAAvC,mBAAOwJ,EAAP,KAAgBC,EAAhB,KACA,EAAwCzJ,mBAAS,IAAjD,mBAAO0J,EAAP,KAAqBC,EAArB,KACA,EAA8B3J,mBAAS,IAAvC,mBAAO4J,EAAP,KAAgBC,EAAhB,KACA,EAAkC7J,oBAAS,GAA3C,mBAAO8J,EAAP,KAAkBC,EAAlB,KACA,EAAkC/J,oBAAS,GAA3C,mBAAOgK,GAAP,KAAkBC,GAAlB,KAGMnK,GAAUtB,KAEhB6B,qBAAU,YACS,uCAAG,8BAAA4F,EAAA,sEACSC,EAAKC,IACxB,GACA,CACIlF,OAAQ,CACJmF,EAAGrB,EACHc,KAAM,UANJ,OACRQ,EADQ,OAWRC,EAAUD,EAASE,KACzBR,EAASO,EAAQ9C,OACjB+F,EAAUjD,EAAQ4D,QAClBT,EAAWnD,EAAQ6D,SACnBR,EAAgBrD,EAAQ8D,MACxBP,EAAWvD,EAAQ+D,SAhBL,2CAAH,qDAkBflD,MAIJ9G,qBAAU,WACF0D,EAAYuG,SAASpB,GACrBa,GAAa,GAEbA,GAAa,MA6BrB,OACI,gCACI,eAACQ,EAAA,EAAD,CAAWvF,SAAUA,IAAQ,eAAaoE,GAAcxI,SAAUyI,EAAa,QAAD,OAASD,IAAvF,UACI,cAACoB,EAAA,EAAD,CACIC,WAAY,cAAC,IAAD,IACZC,gBAAA,eAAuBtB,EAAvB,cACA7H,GAAE,eAAU6H,EAAV,aAHN,SAKI,eAACtH,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,MAA1B,UACI,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACE,GAAG,IAAd,SACI,qBAAKwI,IAAKzB,EAAM1F,MAAOqE,IAAsB,QAAjBqB,EAAM0B,OAAmBC,EAAK3B,EAAM0B,WAGpE,cAAC9I,EAAA,EAAD,CAAMhD,WAAW,aAAaqD,GAAG,IAAjC,SACI,eAAC2I,EAAA,EAAD,CAAKjM,QAAQ,OAAOkM,cAAc,SAASjM,WAAW,SAAtD,UACI,cAACwI,EAAA,EAAD,CAAYzE,QAAQ,KAApB,SAA0BtE,IAC1B,eAAC+I,EAAA,EAAD,CAAY5G,UAAWZ,GAAQ+I,iBAA/B,UAAkDa,EAAlD,KAAkEE,EAAlE,SAAiFJ,EAAjF,OACY,QAAXF,EAAmB,GAAK,cAACvB,EAAA,EAAD,CAAOU,SAAS,OAAhB,SAAuB,cAACnB,EAAA,EAAD,UAAagC,MAC7D,cAACwB,EAAA,EAAD,CAEIlH,QAAS,SAACrD,GAAD,OAAWA,EAAMyK,mBAC1BC,QAAS,SAAC1K,GAAD,OAAWA,EAAMyK,mBAC1BD,cAAc,SACdlM,QAAQ,OACRC,WAAW,SANf,SAQI,sBAAM6C,MAAO,CAAEuJ,OAAQ,eAAvB,SACI,cAACzH,EAAA,EAAD,CACI0H,QAAS,cAAE,IAAF,IACTC,SAAUtB,EACVlH,KAAK,QACLC,QAAQ,YACRa,MAAM,YACNE,QAAS,kBAzDxByH,EAyD8CnC,EAvDnEjC,QAAQC,IAAI,yBACZD,QAAQC,IAAInD,QACRA,EAAYuG,SAASe,GACrBpE,QAAQC,IAAI,sBACLnD,EAAYI,OAAS,GAC5B4F,GAAa,GACb9C,QAAQC,IAAI,kBACZiC,EAAWkC,IACmB,IAAvBtH,EAAYI,SACnB8C,QAAQC,IAAI,wBACZ+C,IAAa,KAZG,IAACoB,GAmDW,oCAexB,cAACC,EAAA,EAAD,CAASzI,QAAQ,WACjB,cAAC0I,EAAA,EAAD,UACI,cAAC,EAAD,CAAcxG,QAASA,SAG/B,cAAC,EAAD,CAAcoD,WAAY6B,GAAW5B,YAvDzB,SAAC7H,EAAOiL,GACT,cAAXA,GAGJvB,IAAa,U,UChGfzL,GAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFI,MAAO,OACPkJ,UAAW,YAsDJwD,GAlDG,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,OAAQvC,EAA2C,EAA3CA,WAAYpF,EAA+B,EAA/BA,YAAalE,EAAkB,EAAlBA,YAC5CC,EAAUtB,KAChB,EAAgCuB,IAAMC,UAAS,GAA/C,mBAAOgF,EAAP,KAAiB2G,EAAjB,KAEMtC,EAAe,SAACuC,GAAD,OAAW,SAACrL,EAAOsL,GACpCF,IAAYE,GAAaD,KAKvB5H,EAAe0H,EAAOzH,KAAI,SAACiF,GAC7B,IAAI4C,EAAQJ,EAAOK,QAAQ7C,GAAS,EAEpC,OACI,cAAC,GAAD,CAAWE,WAAY0C,EAAO5C,MAAOA,EAAOC,WAAYA,EAAYpF,YAAaA,EAAaiB,SAAUA,EAAUqE,aAAcA,OAIxI,MAAoB,sBAAhBxJ,EAEI,gCACI,cAACmM,GAAA,EAAD,CAAU5I,IAAI,EAAd,SACI,cAAC3C,EAAA,EAAD,UACI,cAACsH,EAAA,EAAD,CAAOU,SAAS,QAAhB,sEAGPzE,KAGc,qBAAhBnE,EAGH,cADA,CACA,iBACI,cAACmM,GAAA,EAAD,CAAU5I,IAAI,EAAd,SACI,cAAC3C,EAAA,EAAD,UACI,cAACsH,EAAA,EAAD,CAAOU,SAAS,QAAhB,kCAGPzE,KAMT,qBAAKtD,UAAWZ,EAAQnB,KAAxB,SACKqF,K,mBCkBEiI,GAlEH,WAAO,IAAD,EAEd,EAA4BjM,mBAAS,IAArC,mBAAO0L,EAAP,KAAeQ,EAAf,KAEA,EAAsClM,mBAAS,IAA/C,mBAAO+D,EAAP,KAAoBoI,EAApB,KAEA,EAAsCnM,mBAAS,IAA/C,mBAAOH,EAAP,KAAoBuM,EAApB,KAEMxM,EAAY,uCAAG,WAAOyM,GAAP,eAAApG,EAAA,sEAEMC,EAAKC,IACxB,GACA,CACIlF,OAAQ,CACJqL,EAAGD,EACH5H,KAAM,WAPD,OAEX4B,EAFW,OAWjBY,QAAQC,IAAI,oBACZD,QAAQC,IAAIb,GAEmB,UAA3BA,EAASE,KAAKgG,SACdH,EAAe/F,EAASE,KAAKiG,QAE7BJ,EAAe,IACfF,EAAU7F,EAASE,KAAKkG,SAlBX,2CAAH,sDAgClB,OACI,qBAAK9K,MAAO,CAAEyC,gBAAiB,WAA/B,SACI,gCACI,cAACkD,EAAA,EAAD,mCAA6C,uBAE7C,cAACoF,GAAA,EAAD,CAAWC,SAAS,KAApB,SACI,eAAC7K,EAAA,EAAD,CAAMC,WAAS,EAAC7C,QAAS,EAAGmD,QAAQ,SAApC,UACI,cAACP,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAvB,SACI,cAAC,EAAD,CAAgB4B,YAAaA,EAAab,mBAdvC,SAACgG,GACxB,IAAM0D,EAAU7I,EAAYtE,QAAO,SAACoN,GAAD,OAAeA,IAAc3D,KAChEiD,EAAeS,QAcC,cAAC9K,EAAA,GAAD,GAAMG,MAAI,GAAV,4CAAoB,IAApB,mBAA4B,GAA5B,yBACI,sBAAKN,MAAO,CAAEyC,gBAAiB,UAA/B,UACI,cAAC,EAAD,CAAWxE,aAAcA,EAAcC,YAAaA,IACpD,cAAC,GAAD,CAAW6L,OAAQA,EAAQvC,WAvBpC,SAACD,GAChBiD,GAAe,SAAAW,GAAc,4BAAQA,GAAR,CAAwB5D,QAsBsBnF,YAAaA,EAAalE,YAAaA,QAHlG,eC1DxBkN,IAASC,OAAO,cAAC,GAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.126bad47.chunk.js","sourcesContent":["export const FilmData = [\n    { title: 'The Shawshank Redemption' },\n    { title: 'The Godfather' },\n    { title: 'The Godfather: Part II' },\n    { title: 'The Dark Knight' },\n    { title: '12 Angry Men' },\n    { title: \"Schindler's List\" },\n    { title: 'Pulp Fiction' },\n    { title: 'The Lord of the Rings: The Return of the King' },\n    { title: 'The Good, the Bad and the Ugly' },\n    { title: 'Fight Club' },\n    { title: 'The Lord of the Rings: The Fellowship of the Ring' },\n    { title: 'Star Wars: Episode V - The Empire Strikes Back' },\n    { title: 'Forrest Gump' },\n    { title: 'Inception' },\n    { title: 'The Lord of the Rings: The Two Towers' },\n    { title: \"One Flew Over the Cuckoo's Nest\" },\n    { title: 'Goodfellas' },\n    { title: 'The Matrix' },\n    { title: 'Seven Samurai' },\n    { title: 'Star Wars: Episode IV - A New Hope' },\n    { title: 'City of God' },\n    { title: 'Se7en' },\n    { title: 'The Silence of the Lambs' },\n    { title: \"It's a Wonderful Life\" },\n    { title: 'Life Is Beautiful' },\n    { title: 'The Usual Suspects' },\n    { title: 'Léon: The Professional' },\n    { title: 'Spirited Away' },\n    { title: 'Saving Private Ryan' },\n    { title: 'Once Upon a Time in the West' },\n    { title: 'American History X' },\n    { title: 'Interstellar' },\n    { title: 'Casablanca' },\n    { title: 'City Lights' },\n    { title: 'Psycho' },\n    { title: 'The Green Mile' },\n    { title: 'The Intouchables' },\n    { title: 'Modern Times' },\n    { title: 'Raiders of the Lost Ark' },\n    { title: 'Rear Window' },\n    { title: 'The Pianist' },\n    { title: 'The Departed' },\n    { title: 'Terminator 2: Judgment Day' },\n    { title: 'Back to the Future' },\n    { title: 'Whiplash' },\n    { title: 'Gladiator' },\n    { title: 'Memento' },\n    { title: 'The Prestige' },\n    { title: 'The Lion King' },\n    { title: 'Apocalypse Now' },\n    { title: 'Alien' },\n    { title: 'Sunset Boulevard' },\n    { title: 'Dr. Strangelove or: How I Learned to Stop Worrying and Love the Bomb' },\n    { title: 'The Great Dictator' },\n    { title: 'Cinema Paradiso' },\n    { title: 'The Lives of Others' },\n    { title: 'Grave of the Fireflies' },\n    { title: 'Paths of Glory' },\n    { title: 'Django Unchained' },\n    { title: 'The Shining' },\n    { title: 'WALL·E' },\n    { title: 'American Beauty' },\n    { title: 'The Dark Knight Rises' },\n    { title: 'Princess Mononoke' },\n    { title: 'Aliens' },\n    { title: 'Oldboy' },\n    { title: 'Once Upon a Time in America' },\n    { title: 'Witness for the Prosecution' },\n    { title: 'Das Boot' },\n    { title: 'Citizen Kane' },\n    { title: 'North by Northwest' },\n    { title: 'Vertigo' },\n    { title: 'Star Wars: Episode VI - Return of the Jedi' },\n    { title: 'Reservoir Dogs' },\n    { title: 'Braveheart' },\n    { title: 'M' },\n    { title: 'Requiem for a Dream' },\n    { title: 'Amélie' },\n    { title: 'A Clockwork Orange' },\n    { title: 'Like Stars on Earth' },\n    { title: 'Taxi Driver' },\n    { title: 'Lawrence of Arabia' },\n    { title: 'Double Indemnity' },\n    { title: 'Eternal Sunshine of the Spotless Mind' },\n    { title: 'Amadeus' },\n    { title: 'To Kill a Mockingbird' },\n    { title: 'Toy Story 3' },\n    { title: 'Logan' },\n    { title: 'Full Metal Jacket' },\n    { title: 'Dangal' },\n    { title: 'The Sting' },\n    { title: '2001: A Space Odyssey' },\n    { title: \"Singin' in the Rain\" },\n    { title: 'Toy Story' },\n    { title: 'Bicycle Thieves' },\n    { title: 'The Kid' },\n    { title: 'Inglourious Basterds' },\n    { title: 'Snatch' },\n    { title: '3 Idiots' },\n    { title: 'Monty Python and the Holy Grail' },\n];\n\n","import React, { useState, useEffect } from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport Grid from '@material-ui/core/Grid';\nimport { FilmData } from './FilmData';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: 400,\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    searchIcon: {\n        padding: 10,\n    },\n    searchBar: {\n        paddingTop: 11,\n        paddingBottom: 13,\n        paddingRight: 20,\n    },\n}));\n\nconst filter = createFilterOptions();\n\n\nconst SearchBar = ({ onTermSubmit, searchError }) => {\n    const classes = useStyles();\n\n    const [value, setValue] = React.useState(null);\n    const [errorMessage, setErrorMessage] = React.useState(false);\n\n    useEffect(() => {\n        if (searchError !== '') {\n            setErrorMessage(searchError);\n        } else {\n            setErrorMessage(false);\n        }\n    }, [searchError]);\n\n\n    const onFormSubmit = (event) => {\n        event.preventDefault();\n\n        onTermSubmit(value.title);\n    };\n\n    return (\n        <Paper className={classes.searchBar}>\n            <Autocomplete\n                value={value}\n                onChange={(event, newValue) => {\n                    if (typeof newValue === 'string') {\n                        setValue({\n                            title: newValue,\n                        });\n                    } else if (newValue && newValue.inputValue) {\n                        // Create a new value from the user input\n                        setValue({\n                            title: newValue.inputValue,\n                        });\n                    } else {\n                        setValue(newValue);\n                    }\n                }}\n                filterOptions={(options, params) => {\n                    const filtered = filter(options, params);\n\n                    // Suggest the creation of a new value\n                    if (params.inputValue !== '') {\n                        filtered.push({\n                            inputValue: params.inputValue,\n                            title: `Add \"${params.inputValue}\"`,\n                        });\n                    }\n\n                    return filtered;\n                }}\n                selectOnFocus\n                clearOnBlur\n                handleHomeEndKeys\n                id=\"free-solo-with-text-demo\"\n                options={FilmData}\n                getOptionLabel={(option) => {\n                    // Value selected with enter, right from the input\n                    if (typeof option === 'string') {\n                        return option;\n                    }\n                    // Add \"xxx\" option created dynamically\n                    if (option.inputValue) {\n                        return option.inputValue;\n                    }\n                    // Regular option\n                    return option.title;\n                }}\n                renderOption={(option) => option.title}\n                style={{ width: \"100%\" }}\n                freeSolo\n                renderInput={(params) => (\n                    <Grid container direction=\"row\" alignItems=\"center\">\n                        <Grid container item xs={2} sm={1} md={1} justify=\"center\">\n                            <SearchIcon justifyContent=\"center\" fontSize=\"large\" className={classes.searchIcon} />\n                        </Grid>\n                        <Grid item xs={10} sm={11} md={11}>\n                            <form onSubmit={onFormSubmit}>\n                                <TextField\n                                    error={errorMessage ? true : false}\n                                    helperText={errorMessage ? errorMessage : ''}\n                                    size=\"small\"\n                                    variant=\"outlined\"\n                                    label=\"Search a Movie\"\n                                    // color=\"secondary\"\n                                    margin=\"dense\"\n                                    {...params}\n                                />\n                            </form>\n                        </Grid>\n                    </Grid>\n                )}\n            />\n        </Paper>\n    );\n}\n\nexport default SearchBar;","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport Slide from '@material-ui/core/Slide';\n\nconst NominationItem = ({ nomination, onRemoveNomination }) => {\n    return (\n        <Slide direction=\"up\" in={true} mountOnEnter unmountOnExit>\n            <Paper square variant=\"outlined\" style={{ padding: \"15px\" }}>\n                <div>{nomination.Title}</div>\n                <Button\n                    size=\"small\"\n                    variant=\"contained\"\n                    color=\"secondary\">Info</Button>\n                <Button aria-label=\"delete\" onClick={() => onRemoveNomination(nomination)}>\n                    Remove\n                </Button>\n            </Paper>\n        </Slide>\n    );\n};\n\nexport default NominationItem;","import React from 'react';\nimport NominationItem from './NominationItem';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\n\n\nconst useStyles = makeStyles({\n    paperPadding: {\n        padding: '25px',\n    },\n});\nconst NominationList = ({ nominations, onRemoveNomination }) => {\n    const classes = useStyles();\n\n    const renderedList = nominations.map((nomination) => {\n        return (\n            <NominationItem key={nomination.imdbID} nomination={nomination} onRemoveNomination={onRemoveNomination} />\n        );\n    });\n\n    if (nominations.length === 0) {\n        return (\n            <Paper variant=\"outlined\" className={classes.paperPadding}>There are no nominations</Paper>\n        );\n    }\n\n    return (\n        <div style={{ backgroundColor: \"green\" }}>\n            Nominations:\n            {renderedList}\n        </div>\n    );\n};\n\nexport default NominationList;","export default __webpack_public_path__ + \"static/media/funny.a0e5bd35.jpg\";","import axios from 'axios';\n//97e2a442\n//50a95025\nconst KEY = '50a95025';\n\nexport default axios.create({\n    baseURL: `http://www.omdbapi.com/?apikey=${KEY}`\n});","import axios from 'axios';\n\nconst KEY = 'AIzaSyBdGkkXbpr6j7Z58DpiH3GI83PJVz6YX6o';\n\nexport default axios.create({\n    baseURL: 'https://www.googleapis.com/youtube/v3',\n    params: {\n        part: 'snippet',\n        type: 'video',\n        maxResults: 1,\n        key: KEY\n    }\n});","import React, { useState, useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport omdb from '../api/omdb';\nimport youtube from '../api/youtube';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Paper from '@material-ui/core/Paper';\nimport { Chip } from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles({\n    bold: {\n        fontWeight: 600\n    }\n});\nconst MovieDetails = ({ movieId, expanded }) => {\n    const classes = useStyles();\n\n    const [actors, setActors] = useState('');\n    const [boxOffice, setBoxOffice] = useState('');\n    const [director, setDirector] = useState('');\n    const [genres, setGenres] = useState([]);\n    const [writer, setWriter] = useState('');\n    const [ratings, setRatings] = useState([]);\n    const [plot, setPlot] = useState('');\n    const [title, setTitle] = useState('');\n    const [trailerUrl, setTrailerUrl] = useState('');\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId\n                    }\n                }\n            );\n\n            const results = response.data;\n            let genreArray = [];\n            if (results.Genre) {\n                genreArray = results.Genre.split(',');\n            }\n\n            setActors(results.Actors);\n            setBoxOffice(results.BoxOffice);\n            setDirector(results.Director);\n            setGenres(genreArray);\n            setWriter(results.Writer);\n            setRatings(results.Ratings);\n            setPlot(results.Plot);\n            setTitle(results.Title);\n\n            console.log(\"Detail response:\");\n            console.log(results);\n        }\n        fetchData();\n    }, [movieId]);\n\n    // // YouTube API request for trailers, consumes quota\n    // useEffect(async () => {\n    //     const searchTerm = title + \" trailer\";\n    //     console.log(searchTerm);\n    //     const response = await youtube.get(\n    //         '/search',\n    //         {\n    //             params: {\n    //                 q: searchTerm\n    //             }\n    //         }\n    //     );\n    //     const results = response.data;\n    //     setTrailerUrl(`https://youtube.com/embed/${results.items[0].id.videoId}`);\n    // }, [title]);\n\n    const displayRatings = (ratings ? ratings.map((rating) => {\n        return (\n            <div>\n                <Typography className={classes.bold}>\n                    {rating.Source}\n                </Typography>\n                <Typography>\n                    {rating.Value}\n                </Typography>\n            </div>\n        );\n    }) : null);\n\n    const displayGenres = (genres ? genres.map((genre) => {\n        return (\n            <Chip label={genre} />\n        );\n    }) : null);\n\n    const displayTrailer = (trailerUrl ?\n        <iframe src={trailerUrl} />\n        : null);\n\n    return (\n        <Grid display=\"flex\">\n            <Grid container>\n                <Paper elevation={1} style={{ padding: \"15px\" }}>\n                    <Typography className={classes.bold}>Box Office</Typography>\n                    <Typography>{boxOffice}</Typography>\n                </Paper>\n                {displayGenres}\n\n            </Grid>\n            <Grid container>\n                <Paper elevation={1} style={{ padding: \"15px\" }}>\n                    {displayRatings}\n                </Paper>\n                {displayTrailer}\n            </Grid>\n\n            <Paper elevation={1} square style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Director</Typography>\n                <Typography>{director}</Typography>\n            </Paper>\n\n            <Paper elevation={1} square style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Writer</Typography>\n                <Typography>{writer}</Typography>\n            </Paper>\n\n            <Paper elevation={1} square style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Actors</Typography>\n                <Typography>{actors}</Typography>\n\n            </Paper>\n\n            <Paper elevation={1} style={{ padding: \"15px\" }}>\n                <Typography className={classes.bold}>Plot</Typography>\n                <Typography>{plot}</Typography>\n            </Paper>\n        </Grid>\n    );\n};\n\nexport default MovieDetails;","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport { makeStyles } from '@material-ui/core/styles';\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function CustomizedSnackbars({ handleOpen, handleClose }) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Snackbar open={handleOpen} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"warning\">\n                    Your nomination list is full!\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n","import './MovieItem.css';\nimport React, { useState, useEffect } from 'react';\nimport NA from '../assets/funny.jpg';\nimport omdb from '../api/omdb';\nimport Button from '@material-ui/core/Button';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport MovieDetails from './MovieDetails'\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertWarning from './AlertWarning';\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    heading: {\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        // fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary\n    },\n}));\n\n\nconst MovieItem = ({ movie, onNominate, nominations, panelIndex, expanded, handleChange }) => {\n\n    const movieId = movie.imdbID;\n    const [title, setTitle] = useState('');\n    const [awards, setAwards] = useState('');\n    const [runtime, setRuntime] = useState('');\n    const [releasedYear, setReleasedYear] = useState('');\n    const [country, setCountry] = useState('');\n    const [isDisable, setIsDisable] = useState(false);\n    const [openAlert, setOpenAlert] = useState(false);\n\n    // from Movielist\n    const classes = useStyles();\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const response = await omdb.get(\n                '',\n                {\n                    params: {\n                        i: movieId,\n                        plot: \"full\"\n                    }\n                }\n            );\n\n            const results = response.data;\n            setTitle(results.Title);\n            setAwards(results.Awards);\n            setRuntime(results.Runtime);\n            setReleasedYear(results.Year);\n            setCountry(results.Country);\n        };\n        fetchData();\n    });\n\n    // Disable and enable button according to nomination\n    useEffect(() => {\n        if (nominations.includes(movie)) {\n            setIsDisable(true);\n        } else {\n            setIsDisable(false);\n        }\n    });\n\n    // Extract more detailed information of the movie when more info is needed\n    const onNominateMovie = (nominatedMovie) => {\n        // Verifies if the nomination has already been nominated\n        console.log(\"Current nominations: \");\n        console.log(nominations);\n        if (nominations.includes(nominatedMovie)) {\n            console.log(\"Already nominated!\");\n        } else if (nominations.length < 5) {\n            setIsDisable(true);\n            console.log(\"New nomination\");\n            onNominate(nominatedMovie);\n        } else if (nominations.length === 5) {\n            console.log(\"Nomination list full\");\n            setOpenAlert(true);\n        }\n    };\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        setOpenAlert(false);\n    };\n\n\n    return (\n        <div>\n            <Accordion expanded={expanded === `panel${panelIndex}`} onChange={handleChange(`panel${panelIndex}`)}>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls={`panel${panelIndex}bh-content`}\n                    id={`panel${panelIndex}bh-header`}\n                >\n                    <Grid container direction=\"row\">\n                        <Grid item sm=\"3\">\n                            <img alt={movie.Title} src={movie.Poster === \"N/A\" ? NA : movie.Poster} />\n                        </Grid>\n\n                        <Grid alignItems=\"flex-start\" sm=\"9\">\n                            <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n                                <Typography variant=\"h5\">{title}</Typography>\n                                <Typography className={classes.secondaryHeading}>{releasedYear} ({country})  |  {runtime} </Typography>\n                                {awards === 'N/A' ? '' : <Alert severity=\"info\"><Typography>{awards}</Typography></Alert>}\n                                <Box\n                                    // Prevents the nominate button from opening the detail sheet\n                                    onClick={(event) => event.stopPropagation()}\n                                    onFocus={(event) => event.stopPropagation()}\n                                    flexDirection=\"column\"\n                                    display=\"flex\"\n                                    alignItems=\"center\"\n                                >\n                                    <span style={{ cursor: 'not-allowed' }}>\n                                        <Button\n                                            endIcon={< AddCircleOutlineIcon />}\n                                            disabled={isDisable}\n                                            size=\"small\"\n                                            variant=\"contained\"\n                                            color=\"secondary\"\n                                            onClick={() => onNominateMovie(movie)} >\n                                            Nominate\n                                </Button>\n                                    </span>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                </AccordionSummary>\n                <Divider variant=\"middle\" />\n                <AccordionDetails>\n                    <MovieDetails movieId={movieId} />\n                </AccordionDetails>\n            </Accordion>\n            <AlertWarning handleOpen={openAlert} handleClose={handleClose} />\n\n        </div>\n    );\n};\n\nexport default MovieItem;","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MovieItem from './MovieItem';\nimport Slide from '@material-ui/core/Slide';\nimport Collapse from '@material-ui/core/Collapse';\nimport Alert from '@material-ui/lab/Alert';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        marginTop: '25px',\n    }\n}));\n\nconst MovieList = ({ movies, onNominate, nominations, searchError }) => {\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n\n    const handleChange = (panel) => (event, isExpanded) => {\n        setExpanded(isExpanded ? panel : false);\n    };\n\n\n\n    const renderedList = movies.map((movie) => {\n        let index = movies.indexOf(movie) + 1;\n\n        return (\n            <MovieItem panelIndex={index} movie={movie} onNominate={onNominate} nominations={nominations} expanded={expanded} handleChange={handleChange} />\n        );\n    });\n\n    if (searchError === \"Too many results.\") {\n        return (\n            <div>\n                <Collapse in={true} >\n                    <Paper>\n                        <Alert severity=\"error\">There are too many results - please be more precise!</Alert>\n                    </Paper>\n                </Collapse>\n                {renderedList}\n            </div>\n        );\n    } else if (searchError === \"Movie not found!\") {\n        return (\n            // <div>No movies found.</div>\n            <div>\n                <Collapse in={true} >\n                    <Paper>\n                        <Alert severity=\"error\">No movies found.</Alert>\n                    </Paper>\n                </Collapse>\n                {renderedList}\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.root}>\n            {renderedList}\n        </div>\n    );\n}\n\nexport default MovieList;","import React, { useState } from 'react';\nimport SearchBar from './components/SearchBar';\nimport NominationList from './components/NominationList';\nimport MovieList from './components/MovieList';\nimport Typography from '@material-ui/core/Typography';\nimport Rating from './components/Rating';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Divider from '@material-ui/core/Container';\n\nimport omdb from './api/omdb';\n\nconst App = () => {\n\n    const [movies, setMovies] = useState([]);\n\n    const [nominations, setNominations] = useState([]);\n\n    const [searchError, setSearchError] = useState('');\n\n    const onTermSubmit = async (term) => {\n        // HTTP request to OMDB API\n        const response = await omdb.get(\n            '',\n            {\n                params: {\n                    s: term,\n                    type: 'movie'\n                }\n            }\n        );\n        console.log(\"Search response:\");\n        console.log(response);\n\n        if (response.data.Response === \"False\") {\n            setSearchError(response.data.Error);\n        } else {\n            setSearchError('');\n            setMovies(response.data.Search);\n        }\n    };\n\n    const onNominate = (movie) => {\n        setNominations(oldNominations => [...oldNominations, movie]);\n    };\n\n    const onRemoveNomination = (movie) => {\n        const newList = nominations.filter((movieItem) => movieItem !== movie);\n        setNominations(newList);\n\n    };\n\n    return (\n        <div style={{ backgroundColor: \"#f9fafb\" }}>\n            <div>\n                <Typography>Welcome to Shoppies!</Typography><br />\n                {/* <Divider variant=\"center\" /> */}\n                <Container maxWidth=\"lg\">\n                    <Grid container spacing={5} justify=\"center\">\n                        <Grid item xs={12} sm={3}>\n                            <NominationList nominations={nominations} onRemoveNomination={onRemoveNomination} />\n                        </Grid>\n                        <Grid item item xs={12} sm={9}>\n                            <div style={{ backgroundColor: \"salmon\" }}>\n                                <SearchBar onTermSubmit={onTermSubmit} searchError={searchError} />\n                                <MovieList movies={movies} onNominate={onNominate} nominations={nominations} searchError={searchError} />\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n\n\n        </div >\n    );\n};\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}